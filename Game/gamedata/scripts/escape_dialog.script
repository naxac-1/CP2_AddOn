-- -*- mode: lua; encoding: windows-1251 -*-
--------------------------------------------------------------------------------------------------------
-- Trader Repair
--------------------------------------------------------------------------------------------------------

local weapon_profit_margin = 4
local armor_profit_margin = 1.5

function trader_repair_precond(trader, actor)
	local item_in_slot_1 = Actor:item_in_slot( inventory_slots.PISTOL )
	local item_in_slot_2 = Actor:item_in_slot( inventory_slots.RIFLE )
	local item_in_slot_6 = Actor:item_in_slot( inventory_slots.OUTFIT )
	if item_in_slot_1 ~= nil and 1 > item_in_slot_1:condition() + 0.01 then return true
	elseif item_in_slot_2 ~= nil and 1 > item_in_slot_2:condition() + 0.01 then return true
	elseif item_in_slot_6 ~= nil and 1 > item_in_slot_6:condition() + 0.01 then return true
	else return false
	end	 
end

function trader_check_money_s1(trader, actor)
	local item_in_slot = Actor:item_in_slot( inventory_slots.PISTOL )
	if item_in_slot ~= nil then 
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * weapon_profit_margin )
		if item_repair_cost > 0 and Actor:money() >= item_repair_cost and 1 > item_in_slot:condition() then
			return true
		end 
	end
	return false
end

function trader_check_money_s2(trader, actor)
	local item_in_slot = Actor:item_in_slot( inventory_slots.RIFLE )
	if item_in_slot ~= nil then 
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * weapon_profit_margin )
		if item_repair_cost > 0 and Actor:money() >= item_repair_cost and 1 > item_in_slot:condition() then
			return true
		end 
	end
	return false
end

function trader_check_money_s6(trader, actor)
	local item_in_slot = Actor:item_in_slot( inventory_slots.OUTFIT )
	if item_in_slot ~= nil then 
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * armor_profit_margin )
		if item_repair_cost > 0 and Actor:money() >= item_repair_cost and 1 > item_in_slot:condition() then
			return true
		end 
	end
	return false
end

function trader_repiar_weapon_s1(trader, actor)
	local item_in_slot = Actor:item_in_slot( inventory_slots.PISTOL )
	if item_in_slot ~= nil then
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * weapon_profit_margin )
		item_in_slot:set_condition(1)
		dialogs.relocate_money(actor, item_repair_cost, "out")
	end
end

function trader_repiar_weapon_s2(trader, actor)
	local item_in_slot = Actor:item_in_slot( inventory_slots.RIFLE )
	if item_in_slot ~= nil then
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * weapon_profit_margin )
		item_in_slot:set_condition(1)
		dialogs.relocate_money(actor, item_repair_cost, "out")
	end
end

function trader_repiar_armor_s6(trader, actor)
	local item_in_slot = Actor:item_in_slot( inventory_slots.OUTFIT )
	if item_in_slot ~= nil then
		local item_repair_cost = math.floor( (1-item_in_slot:condition()) * item_in_slot:cost() * armor_profit_margin )
		amk_mod.repair_armor(1)
		dialogs.relocate_money(actor, item_repair_cost, "out")
	end	
end

function repair_costs(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	
	local item_name_and_price = ""
	local item_repair_cost = 0
	if Actor ~= nil then 
		local item_in_slot_1 = Actor:item_in_slot( inventory_slots.PISTOL )
		local item_in_slot_2 = Actor:item_in_slot( inventory_slots.RIFLE )
		local item_in_slot_6 = Actor:item_in_slot( inventory_slots.OUTFIT )
	
		if item_in_slot_1 ~= nil then 
			item_repair_cost = math.floor( (1-item_in_slot_1:condition()) * item_in_slot_1:cost() * weapon_profit_margin )
			if item_repair_cost > 0 then
				item_name_and_price = game.translate_string("list_trader_repair_0").." %c[255,238,155,23]"..item_repair_cost.." рублей%c[default]"
				Actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
			end
		end
		if item_in_slot_2 ~= nil then
			item_repair_cost = math.floor( (1-item_in_slot_2:condition()) * item_in_slot_2:cost() * weapon_profit_margin )
			if item_repair_cost > 0 then
				item_name_and_price = game.translate_string("list_trader_repair_1").." %c[255,238,155,23]"..item_repair_cost.." рублей%c[default]"
				Actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
			end
		end
		if item_in_slot_6 ~= nil then
			item_repair_cost = math.floor( (1-item_in_slot_6:condition()) * item_in_slot_6:cost() * armor_profit_margin )
			if item_repair_cost > 0 then
				item_name_and_price = game.translate_string("list_trader_repair_2").." %c[255,238,155,23]"..item_repair_cost.." рублей%c[default]"
				Actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
			end
		end
	end
end

function trader_miniquest_precond(trader, actor)
	-- Читаем customdata
	local obj = AI:story_object(story_ids.Escape_Trader)
	if (obj) then
		local t = netpk:get(obj, netpk.fState)
		local cd = netpk:parse_custom_data(t.custom_data)
		return cd.microquest
			and ( tonumber(cd.microquest.reward_money) > 0
			or cd.microquest.reward_items ~= "" )
	end
	return false
end

function trader_check_money_miniquest(trader, actor)
	return Actor:money() >= 100
end

function trader_miniquest_transfer(trader, actor)
	dialogs.relocate_money(actor, 100, "out")
	news_main.on_miniquest_reward(trader)
end

function trader_miniquest_free_transfer(trader, actor)
	news_main.on_miniquest_reward(trader)
end

function trader_check_miniquest_free(trader, actor)
	if (Actor:has_info("esc_trader_miniquest_free")) then
		return true
	end
	return false
end

function trader_check_miniquest_free_neg(trader, actor)
	if (Actor:has_info("esc_trader_miniquest_free")) then
		return false
	end
	return true
end

function trader_check_miniquest_free_all_neg(trader, actor)
	if (Actor:has_info("esc_trader_miniquest_free") or Actor:has_info("esc_trader_miniquest_notfree")) then
		return false
	end
	return true
end


--------------------------------------------------------------------------------------------------------
-- Dialog & InfoPortions Function
--------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------
-- Trader
--------------------------------------------------------------------------------------------------------


function transfer_deneg(first_speaker, second_speaker)
    dialogs.relocate_money(second_speaker, 2100, "in")
	dialogs.relocate_item_section(second_speaker, "arc_art_box_8basic", "in")
	shiftCheckDropItem()
	inventory.out_items("arc_art_box_1basic",1)
end
   

function give_weapon_from_trader(trader, actor)  
	dialogs.relocate_item_section(trader, "arc_art_box_1basic", "in")
end

function otday_art (first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "amk_af_night_star", "out")
end

function have_a_art()
    if Actor ~= nil and Actor:object("amk_af_night_star") ~= nil and Actor:dont_has_info("test_quest_art_vziat") then
Actor:give_info_portion("test_quest_art_vziat")
    end
end


function have_a_art2 (stalker, player)
    return stalker:object ("amk_af_night_star") ~= nil and stalker:object ("arc_art_box_1basic") ~= nil
end




function trader_alredy_give_job(trader, actor)
	if (Actor:has_info("agroprom_military_case") and Actor:dont_has_info("agroprom_military_case_done")) or
	   (Actor:has_info("escape_blockpost_case") and Actor:dont_has_info("escape_blockpost_case_done")) or
	   (Actor:has_info("tutorial_artefact_start") and Actor:dont_has_info("tutorial_artefact_done")) or
	   (Actor:has_info("tutorial_wounded_start") and Actor:dont_has_info("esc_serious_talk"))
	then
		return true
	end
	return false 
end

function trader_give_extra_job(trader, actor)
	if Actor:has_info("escape_blockpost_case") and Actor:dont_has_info("escape_blockpost_case_done")
	then
		return true
	end
	return false
end

function bandits_die(actor,npc)
	if Actor:has_info("esc_kill_bandits_quest_kill") and Actor:dont_has_info("esc_kill_bandits_noquest_kill")
	then
		return true
	end
	return false
end

function trader_need_extra_job(trader, actor)
	if Actor:dont_has_info("escape_blockpost_case") and 
	    Actor:has_info("esc_return")
	then
		return true
	end
	return false
end

function is_tutorial()
	return Actor:dont_has_info("tutorial_end")
end

function is_not_tutorial()
	return Actor:has_info("tutorial_end")
end

function is_not_tutorial_art(actor, trader)
	local tutorial_artefact = Actor:object("af_blood_tutorial")
	if (Actor:has_info("tutorial_artefact_start") and Actor:dont_has_info("tutorial_artefact_done")
		and  tutorial_artefact ~= nil) or Actor:has_info("tutorial_artefact_done")
	then
		return true
	end
	return false
end

function not_final_job(trader, actor)
	return Actor:dont_has_info("escape_blockpost_case_done")
end

function trader_test(actor, npc)
 	printf ("!!!")	
	return true
end



function trader_dont_give_job(first_speaker, second_speaker)
	return not trader_alredy_give_job(first_speaker, second_speaker)
end

function finalize_quests(first_speaker, second_speaker)
	if tutorial_artefact_end(first_speaker, second_speaker) == true or
	   tutorial_wounded_end(first_speaker, second_speaker) == true
	then
		return true
	end
	return false
end

function not_finalize_quests(first_speaker, second_speaker)
	return not this.finalize_quests(first_speaker, second_speaker)	
end

function tutorial_artefact_end(first_speaker, second_speaker)
	local tutorial_artefact = first_speaker:object("af_blood_tutorial")
	if Actor:has_info("tutorial_artefact_start") and 
	   Actor:dont_has_info("tutorial_artefact_done") and
	   tutorial_artefact ~= nil
	then
		return true
	end
	return false
end

function tutorial_artefact_have_not(first_speaker, second_speaker)
	local tutorial_artefact = first_speaker:object("af_blood_tutorial")
	if Actor:has_info("tutorial_artefact_start") and 
	   Actor:dont_has_info("tutorial_artefact_done") and
	   tutorial_artefact == nil
	then
		return true
	end
	return false
end

function tutorial_wounded_end(first_speaker, second_speaker)
	-- local wounded_flash = first_speaker:object("esc_wounded_flash")
	if Actor:has_info("tutorial_wounded_start")	and 
		Actor:has_info("tutorial_wounded_give_info")	and 	
	   Actor:dont_has_info("esc_serious_talk")
 -- and   wounded_flash ~= nil
	then
		return true
	end
	return false
end

function trader_dont_has_job(first_speaker, second_speaker)
    if trader_need_military_case(first_speaker, second_speaker) == false and
	   trader_need_blockpost_box(first_speaker, second_speaker) == false
	then
		return true
	end
	return false
end


--' Escape tutorial artefact
function have_tutorial_artefact(first_speaker, second_speaker)
  	return first_speaker:object("af_blood_tutorial") ~= nil
end
function give_medkit(first_speaker, second_speaker)
	dialogs.relocate_item_section(first_speaker, "medkit", "in")
end
function give_tutorial_artefact(first_speaker, second_speaker)
	dialogs.relocate_item_section(second_speaker, "af_blood_tutorial", "out")
end


--' Meet fox
function have_fox_info(first_speaker, second_speaker)
  	return first_speaker:object("fox_flash") ~= nil
end

--' fox help

function transfer_medikit_to_fox (player, wounded)
	wounded:set_relation(game_object.friend, player)
	Actor:give_info_portion("escape_fox_heal")
end

function give_weapon_to_actor (trader, actor)
	dialogs.relocate_item_section(trader, "wpn_pm", "in")
	dialogs.relocate_item_section(trader, "vodka", "in")
	dialogs.relocate_item_section(trader, "ammo_9x18_fmj", "in")
	dialogs.relocate_item_section(trader, "device_torch", "in")

	spawn_teleport.spawn_teleport1()
	spawn_restrictor.create_sr1()
	spawn_restrictor.create_sr2()
end


--' Escape blockpost box
-- Спавним кейс скриптом в диалоге с Сидором
function blockpost_case_spawn()
	local obj = AI:object("esc_quest_case_01")
	if obj and (obj:section_name() == "bread_a"
		or obj.m_story_id == 0)
	then
		AI:release(obj, true)
		AI:create( AI:spawn_id(story_ids.Escape_blockpost_case) )
	end
end

function have_blockpost_case(first_speaker, second_speaker)
  	return first_speaker:object("quest_case_01") ~= nil
end

function give_blockpost_case(first_speaker, second_speaker)
	dialogs.relocate_item_section(second_speaker, "quest_case_01", "out")
end

function give_blockpost_case_reward(first_speaker, second_speaker)
	dialogs.relocate_money(first_speaker, 2000, "in")
end

--' Agroprom military case
function trader_need_military_case(first_speaker, second_speaker)
    if Actor:has_info("esc_serious_talk") and
	   Actor:dont_has_info("agroprom_military_case")
	then
		return true
	end
	return false
end

--' Escape trader artefact
function have_artefact_from_fleshes(first_speaker, second_speaker)
	if Actor ~= nil and
	   (Actor:object("af_vyvert") ~= nil or
	   Actor:object("af_gravi") ~= nil or
	   Actor:object("af_gold_fish") ~= nil)
	then
		return true
	end
  	return false
end


--' Ящик с блокпоста
function trader_need_blockpost_box(first_speaker, second_speaker)
    if Actor:has_info("tutorial_end") and
	   Actor:has_info("esc_trader_speak") and
	   Actor:dont_has_info("escape_blockpost_case")
	then
		return true
	end
	return false
end

--' tutorial wounded in vagon
function wounded_need_help(first_speaker, second_speaker)
	return Actor ~= nil and Actor:dont_has_info( "tutorial_wounded_help" )
end

--' trader needs military documents
function trader_need_military_document(first_speaker, second_speaker)
    if Actor:has_info("escape_blockpost_case_done") and
	   Actor:dont_has_info("agroprom_military_case")
	then
		return true
	end
	return false
end

--' trader dialog about docs from labx18
function actor_has_documents (actor, npc)
	if Actor:object("dar_document4") then
		return true
	else
		return false
	end
end

--' Escape dynamite for Wolf
function transfer_wolf_reward(first_speaker, second_speaker)
	dialogs.relocate_item_section(first_speaker, "af_medusa", "in")
	dialogs.relocate_item_section(first_speaker, "wpn_pmm", "in")
        dialogs.relocate_item_section(first_speaker, "ammo_9x18_pmm", "in")
end

function wolf_additional_reward(first_speaker, second_speaker)
    dialogs.relocate_item_section(first_speaker, "medkit", "in")
    dialogs.relocate_item_section(first_speaker, "bandage", "in")
    dialogs.relocate_item_section(first_speaker, "wpn_oc27", "in")
    dialogs.relocate_item_section(first_speaker, "grenade_f1", "in") 
	inventory.give_items("ammo_9x18_pmm", 2)
--    dialogs.relocate_item_section(first_speaker, "ammo_9x18_pmm", "in")
 --   dialogs.relocate_item_section(first_speaker, "ammo_9x18_pmm", "in")
end


--' Escape Wounded's flash
function wounded_give_flash(first_speaker, second_speaker)
	dialogs.relocate_item_section(first_speaker, "esc_wounded_flash", "in")
end

function have_wounded_flash(first_speaker, second_speaker)
  	return first_speaker:object("esc_wounded_flash") ~= nil
end
function dont_have_wounded_flash(first_speaker, second_speaker)
  	return not have_wounded_flash(first_speaker, second_speaker)
end

function give_wounded_flash(first_speaker, second_speaker)
	dialogs.relocate_item_section(second_speaker, "esc_wounded_flash", "out")
	dialogs.relocate_money(second_speaker, 1500, "in")
end

function give_knife_to_actor(first_speaker, second_speaker)
	dialogs.relocate_item_section(first_speaker, "wpn_knife", "in")
end

--' Escape bandits factory
function give_factory_reward_trader(first_speaker, second_speaker)
	dialogs.relocate_money(first_speaker, 500, "in")
end

--' Give X-18 documents read

function give_documents_reward (first_speaker, second_speaker)
	dialogs.relocate_money(first_speaker, 1000, "in")
end


--' Kill killers raid
function give_reward_killers(first_speaker, second_speaker)
	dialogs.relocate_money(first_speaker, 2500, "in")
end


--' Soldiers on bridge
function has_soldiers_bribe(actor, npc)
	return Actor:money() >= 500
end

function give_soldiers_bribe(actor, npc)
	dialogs.relocate_money(npc, 500, "out")	
end

function fox_pay_money(actor, npc)
	dialogs.relocate_money(npc, 1500, "in")	
	treasure_manager.get_treasure_manager():give_treasure("esc_secret_truck_goods")
end

function run_tutorial_pda(first_speaker, second_speaker)
	printf("!-!-!")
	first_speaker:stop_talk()
    second_speaker:stop_talk()
	game.start_tutorial("part_1_pda")
end

function wolf_precond_univ (actor, npc)
	return Actor:has_info("esc_kill_bandits_quest_done") or (Actor:has_info("tutorial_wounded_give_info") and Actor:dont_has_info("esc_kill_bandits_quest_have"))
end


--------------------------------------------------------------------------------------------------------
-- Trader Factions - ABC1 Mod by Speed aka LW. Правка Архара
--------------------------------------------------------------------------------------------------------

function is_actor_stalker()
	return Actor:character_community() == "actor"
end

function check_esc_bridge_pay( fs, ss )
	return Actor:money() >= 250000
		and inventory.search( "vodka", 20 )
end
function esc_bridge_repair( fs, ss )
	local npc = (fs:id() == 0 and ss) or fs
	dialogs.relocate_money( npc, 250000, "out" )
	inventory.out_items( "vodka",20 )
	Actor:disable_info_portion( "esc_bridge_pass_fire" )
end

function factions_repair_check( community )
	local chkgoodwill = relation_registry.community_goodwill(community,  Actor:id())
	if chkgoodwill < 0 then
		if chkgoodwill > -100 and Actor:money() >= 250000 then return true
		elseif chkgoodwill > -1000 and  Actor:money() >= 300000 then return true
		elseif chkgoodwill <= -1000 and Actor:money() >= 350000 then return true
		else return false end
	end
	return false
end

function factions_repair_checkduty_r(trader, actor)
	return factions_repair_check( "dolg" )
end
function factions_repair_checkduty_rr(trader, actor)
	local rel = relation_registry.community_goodwill ("dolg", Actor:id ())
	if rel >= 0 and rel < 500 and Actor:money() >= 100000 then return true end
	return false
end

function factions_repair_checkduty_j(trader, actor)
local whatami = Actor:character_community()
   if (relation_registry.community_goodwill ("dolg", Actor:id()) >= 0) and (Actor:money() >= 250000) and (whatami ~= "actor_dolg") and (whatami == "actor") then return true
   else return false
   end
end

function factions_repair_checkfree_r(trader, actor)
	return factions_repair_check( "freedom" )
end
function factions_repair_checkfree_rr(trader, actor)
	local rel = relation_registry.community_goodwill ("freedom", Actor:id ())
	if rel >= 0 and rel < 500 and Actor:money() >= 100000 then return true end
	return false
end

function factions_repair_checkfree_j(trader, actor)
	local whatami = Actor:character_community()
	if (relation_registry.community_goodwill ("freedom", Actor:id()) >= 0) and (Actor:money() >= 250000) and (whatami ~= "actor_freedom") and (whatami == "actor") then return true
   else return false
   end
end

function factions_repair_checkstalker_r(trader, actor)
	local whatami = Actor:character_community()
    local gulag = xr_gulag.get_gulag_by_name ("esc_lager")
	-- logf("testing stalker " .. whatami)
	if (gulag) then
		if (gulag:npc_is_enemy_to_anybody(Actor)) and (Actor:money() >= 250000) and (whatami ~= "monolith") and (whatami ~= "bandit") and (whatami ~= "military") and (whatami ~= "killer") then
	       return true
		end
	end
    return false
end

function factions_repair_checkstalker(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 250000
    local gulag = xr_gulag.get_gulag_by_name ("esc_lager")
	if (gulag) then
		if gulag:npc_is_enemy_to_anybody(Actor) and Actor:money() >= 250000 then
			item_name_and_price = game.translate_string("list_factions_repair_4").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
			Actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
		end
	end
end

function factions_repair_setstalker_r(trader, actor)
	local howmuch = 250000
    local gulag = xr_gulag.get_gulag_by_name ("esc_lager")
	if (gulag) then
		if gulag:npc_is_enemy_to_anybody(Actor) and Actor:money() >= 250000 then
			local chkgoodwill = relation_registry.community_goodwill("stalker",  Actor:id())
			xr_gulag.setGulagRelation ("esc_lager", game_object.neutral, Actor)	
			relation_registry.set_community_goodwill ("stalker", Actor:id(), 120)	
			dialogs.relocate_money(actor, howmuch, "out")
			archievements.acv_count_event("acv_xam", 3)
		end
	end
end

function factions_repair_checkduty(first_speaker, second_speaker)
	this.factions_repair_show( "dolg" )
end

function factions_repair_show( community )
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local howmuch = 0
	local rel = relation_registry.community_goodwill (community, Actor:id())
	if rel < -1000 then
		howmuch = 350000
	elseif rel < -100 then
		howmuch = 300000
	elseif rel < 0 then
		howmuch = 250000
	else
		howmuch = 100000
	end
	local item_name_and_price = game.translate_string("list_factions_repair_0").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
	Actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
end

function factions_repair_checkfree(first_speaker, second_speaker)
	this.factions_repair_show( "freedom" )
end

function factions_repair_checkeco_r(first_speaker, second_speaker)
	local rel = relation_registry.community_goodwill ("ecolog", Actor:id ())
	if rel >= 0 and rel < 500 and Actor:money() >= 100000 then return true end
	return factions_repair_check( "ecolog" )
end
function factions_repair_showeco(first_speaker, second_speaker)
	factions_repair_show( "ecolog" )
end
function factions_repair_eco_r(first_speaker, second_speaker)
	local npc = (first_speaker:id() == 0) and second_speaker or first_speaker
	factions_repair_set( "ecolog", npc )
end


function factions_repair_set( community, npc )
	local howmuch = 0
	local chkgoodwill = relation_registry.community_goodwill("dolg",  Actor:id())
	local money = Actor:money()
	if chkgoodwill >= 0 and money >= 100000 then
		howmuch = 100000
	elseif chkgoodwill > -100 and money >= 250000 then
		howmuch = 250000
	elseif chkgoodwill > -1000 and money >= 300000 then
		howmuch = 300000
	elseif chkgoodwill <= -1000 and money >= 350000 then
		howmuch = 350000
	end
	dialogs.relocate_money(npc, howmuch, "out")
	relation_registry.set_community_goodwill ("dolg", Actor:id(), 1000)
	archievements.acv_count_event("acv_xam", 3)
end

function factions_repair_setduty_r(trader, actor)
	local npc = (trader:id() == 0) and actor or trader
	factions_repair_set( "dolg", npc )
end

function factions_repair_setduty_j(trader, actor)
	if Actor ~= nil then 
		dialogs.relocate_money(actor, 350000, "out")
		Actor:set_character_community("actor_dolg", 0, 0)
		local chkgoodwill = relation_registry.community_goodwill("dolg",  Actor:id())
		if chkgoodwill > 0 then 
			chkgoodwill = chkgoodwill + 200
			relation_registry.set_community_goodwill ("dolg", Actor:id(), chkgoodwill)
		else
			relation_registry.set_community_goodwill ("dolg", Actor:id (), 200)
		end
		archievements.acv_count_event("acv_xam", 3)
	end
end

function factions_repair_setfree_r(trader, actor)
	local npc = (trader:id() == 0) and actor or trader
	factions_repair_set( "freedom", npc )
end

function factions_repair_setfree_j(trader, actor)
	if Actor ~= nil then 
		dialogs.relocate_money(actor, 350000, "out")
		Actor:set_character_community("actor_freedom", 0, 0)
		local chkgoodwill = relation_registry.community_goodwill("freedom",  Actor:id())
		if chkgoodwill > 0 then
			chkgoodwill = chkgoodwill + 250
			relation_registry.set_community_goodwill ("freedom", Actor:id(), chkgoodwill)
		else
			relation_registry.set_community_goodwill ("freedom", Actor:id(), 250)
		end
		archievements.acv_count_event("acv_xam", 3)
	end
end

function factions_repair_checkmon_j(trader, actor)
   local whatami = Actor:character_community()
   local playhitemb = Actor:object("h_2")
   if (playhitemb ~= nil or db.joinfactions == "yes") and (Actor:money() >= 250000) and (whatami ~= "monolith") and (whatami == "actor") then return true
   else return false
   end
end

function factions_repair_checkmonolith(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 250000
	if  Actor:money() >= 250000 then
		item_name_and_price = game.translate_string("list_factions_repair_5").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
		Actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
	end
end

function factions_repair_setmon_j(trader, actor)
	if Actor ~= nil then 
		dialogs.relocate_money(actor, 250000, "out")
		Actor:set_character_community("monolith", 0, 0)
		local chkgoodwill = relation_registry.community_goodwill("monolith",  Actor:id())
		if chkgoodwill > 0 then 
			chkgoodwill = chkgoodwill + 200
			relation_registry.set_community_goodwill ("monolith", Actor:id(), chkgoodwill)
		else
			relation_registry.set_community_goodwill ("monolith", Actor:id(), 200)
		end
		archievements.acv_count_event("acv_xam", 3)
	end
end

function factions_repair_bandit_j(trader, actor)
   local whatami = Actor:character_community()
   local playhitemb = Actor:object("h_2")
   if (playhitemb ~= nil or db.joinfactions == "yes") and (Actor:money() >= 250000) and (whatami ~= "bandit") and (whatami == "actor") then return true
   else return false
   end
end

function factions_repair_checkbandit(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 250000
	if  Actor:money() >= 250000 then
		item_name_and_price = game.translate_string("list_factions_repair_7").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
		Actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
	end
end

function factions_repair_setbandit_j(trader, actor)
	if Actor ~= nil then 
		dialogs.relocate_money(actor, 250000, "out")
		Actor:set_character_community("bandit", 0, 0)
		local chkgoodwill = relation_registry.community_goodwill("bandit",  Actor:id())
		if chkgoodwill > 0 then 
			chkgoodwill = chkgoodwill + 200
			relation_registry.set_community_goodwill ("bandit", Actor:id(), chkgoodwill)
		else
			relation_registry.set_community_goodwill ("bandit", Actor:id(), 200)
		end
		archievements.acv_count_event("acv_xam", 3)
	end
end


function factions_repair_mil_j(trader, actor)
   local whatami = Actor:character_community()
   local playhitemb = Actor:object("h_2")
   if (playhitemb ~= nil or db.joinfactions == "yes") and (Actor:money() >= 400000) and (whatami ~= "military") and (whatami == "actor") then return true
   else return false
   end
end

function factions_repair_checkmil(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 400000
	if  Actor:money() >= 400000 then
		item_name_and_price = game.translate_string("list_factions_repair_6").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
		Actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
	end
end

function factions_repair_setmil_j(trader, actor)
	if Actor ~= nil then 
		dialogs.relocate_money(actor, 400000, "out")
		Actor:set_character_community("military", 0, 0)
		local chkgoodwill = relation_registry.community_goodwill("military",  Actor:id())
		if chkgoodwill > 0 then 
			chkgoodwill = chkgoodwill + 200
			relation_registry.set_community_goodwill ("military", Actor:id(), chkgoodwill)
		else
			relation_registry.set_community_goodwill ("military", Actor:id(), 200)
		end
		archievements.acv_count_event("acv_xam", 3)
	end
end


function factions_repair_kill_j(trader, actor)
   local whatami = Actor:character_community()
   local playhitemb = Actor:object("h_2")
   if (playhitemb ~= nil or db.joinfactions == "yes") and (Actor:money() >= 300000) and (whatami ~= "killer") and (whatami == "actor") then return true
   else return false
   end
end

function factions_repair_checkkill(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 300000
		if  Actor:money() >= 300000 then
			item_name_and_price = game.translate_string("list_factions_repair_8").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
			Actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
		end
end

function factions_repair_setkill_j(trader, actor)
	if Actor ~= nil then 
		dialogs.relocate_money(actor, 300000, "out")
		Actor:set_character_community("killer", 0, 0)
		local chkgoodwill = relation_registry.community_goodwill("military",  Actor:id())
		if chkgoodwill > 0 then 
			chkgoodwill = chkgoodwill + 200
			relation_registry.set_community_goodwill ("killer", Actor:id(), chkgoodwill)
		else
			relation_registry.set_community_goodwill ("killer", Actor:id(), 200)
		end
		archievements.acv_count_event("acv_xam", 3)
	end
end


function factions_repair_eco_j(trader, actor)
   local whatami = Actor:character_community()
   if (Actor:money() >= 300000) and (whatami ~= "ecolog") and (whatami == "actor") then return true
   else return false
   end
end

function factions_repair_checkeco(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 500000
		if  Actor:money() >= 300000 then
			item_name_and_price = game.translate_string("list_factions_repair_10").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
			Actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
		end
end

function factions_repair_seteco_j(trader, actor)
	if Actor ~= nil then 
		dialogs.relocate_money(actor, 300000, "out")
		Actor:set_character_community("ecolog", 0, 0)
		local chkgoodwill = relation_registry.community_goodwill("ecolog",  Actor:id())
		if chkgoodwill > 0 then 
			chkgoodwill = chkgoodwill + 200
			relation_registry.set_community_goodwill ("ecolog", Actor:id(), chkgoodwill)
		else
			relation_registry.set_community_goodwill ("ecolog", Actor:id(), 200)
		end
		archievements.acv_count_event("acv_xam", 3)
	end
end


function factions_repair_quit_j(trader, actor)
   local whatami = Actor:character_community()
   if (whatami == "actor_dolg") or (whatami == "actor_freedom") or (whatami == "monolith") or (whatami == "bandit") or (whatami == "military") or (whatami == "killer") or (whatami == "ecolog") then
	   if (Actor:money() >= 250000) then return true end
   end
   return false
end

function factions_repair_checkquit(first_speaker, second_speaker)
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_lost_money")
	local item_name_and_price = ""
	local howmuch = 250000
		if  Actor:money() >= 250000 then
			item_name_and_price = game.translate_string("list_factions_repair_9").." %c[255,238,155,23]"..howmuch.."Ru%c[default]"
			Actor:give_talk_message(item_name_and_price, task_texture, task_rect, "iconed_trade_info")
		end
end

function factions_repair_setquit_j(trader, actor)
	if Actor ~= nil then 
		dialogs.relocate_money(actor, 250000, "out")
		Actor:set_character_community("actor", 0, 0)
	end
end

function transfer_babok(first_speaker, second_speaker)
    dialogs.relocate_item_section(second_speaker, "neytral_gaz_outfit_v3_plus", "in")
end
 
function otday_britvu(first_speaker, second_speaker)
 inventory.out_items("britva",1) 
end
 
function have_a_britva(stalker, player)
	return stalker:object ("britva") ~= nil
end

--' спавним нычку с бритвой на Кордоне, и трёх сосычей, чтобы жизнь медом не казалась))
function nychka_britva_spawn()
	AI:create_free("m_inventory_box41",vector():set(367.4817199707,15.058229446411,-37.764579772949),594078,0)
	AI:create_free("bloodsucker_weak",vector():set(362.52444458008,14.946105003357,-40.518566131592),593099,0)
	AI:create_free("bloodsucker_effector",vector():set(362.52444458016,14.946105003357,-40.518566131592),593099,0)
	AI:create_free("bloodsucker_effector",vector():set(354.77905273438,15.000102996826,-35.064975738525),590991,140)
	AI:create_free("af_soul",vector():set(350.12689208984,15.249977111816,-30.440357208252),589301,140)
	AI:create_free("ammo_12x70_kart",vector():set(350.12689208974,15.249977111816,-30.440357208252),589301,140)
	AI:create_free("ammo_12x70_kart",vector():set(350.12689208975,15.249977111816,-30.440357208252),589301,140)
end

--' спавним бабок, изломов и зомбаков в тоннеле
function spawn_monstrov()
	AI:create_free("zombie_babka_strong",vector():set(362.52444458008,14.946105003357,-40.518566131592),593099,0)
	AI:create_free("zombie_babka_weak",vector():set(362.52444458016,14.946105003357,-40.518566131592),593099,0)
	AI:create_free("zombie_babka_strong",vector():set(354.77905273438,15.000102996826,-35.064975738525),590991,140)
	AI:create_free("zombie_immortal",vector():set(354.77905273638,15.000102996826,-35.064975738525),590991,140)
	AI:create_free("zombie_babka_strong",vector():set(358.0146484375,14.991872787476,-32.131496429443),591847,0)
	AI:create_free("zombie_babka_weak",vector():set(359.54302978516,15.178615570068,-36.316608428955),592408,0)
	AI:create_free("zombie_babka_strong",vector():set(362.75024414063,15.128992080688,-39.670379638672),593100,0)
	AI:create_free("zombie_hell7",vector():set(361.75024414063,15.128992080688,-39.670379638672),593100,0)
	AI:create_free("zombie_babka_normal",vector():set(350.78411865234,14.90901184082,-33.632171630859),589563,140)
	AI:create_free("zombie_trup2",vector():set(350.78411865434,14.90901184082,-33.632171630859),589563,140)
	AI:create_free("zombie_babka_strong",vector():set(353.92022705078,15.15726269531,-33.661926269531),590768,140)
	AI:create_free("zombie_babka_normal",vector():set(360.14440917969,15.1761302948,-37.427829742432),592407,0)
	AI:create_free("vodjanoj",vector():set(350.20892333984,15.042770385742,-26.376876831055),589305,140)
	AI:create_free("zombie_babka_strong",vector():set(348.64157104492,14.906609535217,-32.287246704102),588746,140)
	AI:create_free("zombie_babka_strong",vector():set(358.0146484375,14.991872787476,-32.131496429443),591847,0)
	AI:create_free("zombie_strong",vector():set(335.5146484375,15.526147842407,-24.381948471069),582810,2)
	AI:create_free("zombie_hell5",vector():set(337.42208862305,15.166791915894,-22.637878417969),583783,2)
	AI:create_free("zombie_hell1",vector():set(339.53707885742,15.396614074707,-21.737270355225),584725,2)
	AI:create_free("vodjanoj",vector():set(340.76348876953,15.21498298645,-20.280544281006),585351,2)
	AI:create_free("zombie_babka_normal",vector():set(340.78348876953,15.21498298645,-20.280544281006),585351,2)
	AI:create_free("zombie_immortal",vector():set(341.79803466797,15.088324546814,-21.24963760376),585667,2)
	AI:create_free("zombie_hell2",vector():set(342.17352294922,15.02472626495361,-24.172626495361),585977,2)
	AI:create_free("zombie_weak",vector():set(344.59268188477,14.9133244247437,-23.765293121338),586915,2)
	AI:create_free("zombie_immortal",vector():set(344.65268188477,14.9133244247437,-23.765293121338),586915,2)
	AI:create_free("zombie_hell6",vector():set(345.34234619141,15.056350708008,-26.022947311401),587231,2)
	AI:create_free("zombie_hell1",vector():set(346.16473388672,15.022896766663,-27.525096893311),587868,140)
	AI:create_free("zombie_hell7",vector():set(347.2350769043,14.901352882385,-26.870290756226),588169,140)
	AI:create_free("zombie_babka_weak",vector():set(347.2550769043,14.901352882385,-26.870290756226),588169,140)
	AI:create_free("zombie_strong",vector():set(348.99685668945,14.80908870697,-26.603900909424),589033,140)
	AI:create_free("zombie_hell3",vector():set(344.51086425781,15.289694786072,-20.780237197876),586919,2)
	AI:create_free("zombie_hell6",vector():set(342.46298217773,14.983442306519,-22.337327957153),585980,2)
	AI:create_free("zombie_hell7",vector():set(342.46498217773,14.983442306519,-22.337327957153),585980,2)
	AI:create_free("zombie_babka_normal",vector():set(342.46698217773,14.983442306519,-22.337327957153),585980,2)
	AI:create_free("zombie_hell4",vector():set(343.66607666016,14.936946868896,-23.076726913452),586603,2)
	AI:create_free("zombie_strong",vector():set(327.13098144531,16.580987930298,-23.365896224976),578734,2)
	AI:create_free("zombie_immortal",vector():set(327.13098144641,16.580987930298,-23.365896224976),578734,2)
	AI:create_free("vodjanoj",vector():set(327.13098144651,16.580987930298,-23.365896224976),578734,2)
	AI:create_free("zombie_ghost",vector():set(327.13098144681,16.580987930298,-23.365896224976),578734,2)
	AI:create_free("fracture_strong",vector():set(314.18695068359,16.467681884766,10.048849105835),572322,139)
	AI:create_free("zombie_hell5",vector():set(314.18695068559,16.467681884766,10.048849105835),572322,139)
	AI:create_free("fracture_strong",vector():set(314.18695068379,16.467681884766,10.048849105835),572322,139)
	AI:create_free("zombie_babka_strong",vector():set(315.18695068379,16.467681884766,10.048849105835),572322,139)
	AI:create_free("zombie_hell7",vector():set(314.17795068379,16.467681884766,10.048849105835),572322,139)
	AI:create_free("zombie_ghost",vector():set(314.18695068779,16.467681884766,10.048849105835),572322,139)
	AI:create_free("fracture_strong",vector():set(307.77069091797,16.160615921021,-4.0254411697388),568966,139)
	AI:create_free("zombie_immortal",vector():set(307.77069091997,16.160615921021,-4.0254411697388),568966,139)
	AI:create_free("fracture_strong",vector():set(307.77069091807,16.160615921021,-4.0254411697388),568966,139)
	AI:create_free("zombie_babka_weak",vector():set(308.77069091807,16.160615921021,-4.0254411697388),568966,139)
	AI:create_free("zombie_trup2",vector():set(309.77069091807,16.160615921021,-4.0254411697388),568966,139)
	AI:create_free("fracture_strong",vector():set(313.89013671875,15.640267372131,6.0813541412354),571947,139)
	AI:create_free("zombie_hell4",vector():set(314.89013671875,15.640267372131,6.0813541412354),571947,139)
	AI:create_free("zombie_hell1",vector():set(315.89013671875,15.640267372131,6.0813541412354),571947,139)
	AI:create_free("zombie_weak",vector():set(313.89013671675,15.640267372131,6.0813541412354),571947,139)
	AI:create_free("zombie_hell2",vector():set(313.89213671675,15.640267372131,6.0813541412354),571947,139)
	AI:create_free("fracture_strong",vector():set(313.89013671885,15.640267372131,6.0813541412354),571947,139)
end

function tolik_taynik()
	treasure_manager.give_random_treasure(false, level.name())
end