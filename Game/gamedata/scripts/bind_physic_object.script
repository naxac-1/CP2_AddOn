----------------------------------------------------------------------------------------------------
-- Physic objects binding
----------------------------------------------------------------------------------------------------
-- Разработчик: Evgeniy Negrobov (Jon) jon@gsc-game.kiev.ua
-- Доработки: Andrey Fidrya (Zmey) af@svitonline.com
----------------------------------------------------------------------------------------------------
local clsid_for_fix = {
	[clsid.obj_physic]           = true,
	[clsid.obj_phys_destroyable] = true,
	[clsid.script_phys]          = true
}
local function physics_position_fix(obj)
	local ps = obj:get_physics_shell()
	if not ps then return end

	local need_fix = false
	local el
	for i = 0, ps:get_elements_number()-1 do
		el = ps:get_element_by_order(i)
		if el and el:is_fixed() then
			need_fix = true
			break
		end
	end

	if not need_fix then return end

	local se_obj = AI:object( obj:id() )
	if se_obj and se_obj.position:distance_to( obj:position() ) > 0.1 then
		log( "~ fix position for object [%s]", obj:name() )
		local data_old = netpk:get(se_obj)
		local new_obj = AI:create(
			obj:section(),
			se_obj.position,
			se_obj.m_level_vertex_id,
			se_obj.m_game_vertex_id
		)
		new_obj.angle = se_obj.angle
		-- local data = {}
		-- for _, k in ipairs( {
			-- "fixed_bones", "mass", "physic_type", "visual_name", "custom_data"
		-- } ) do
			-- data[k] = data_old[k]
		-- end
		netpk:modify(new_obj, data_old)
		new_obj = AI:object(new_obj.id)
		new_obj:use_ai_locations(false)
		-- level.map_add_object_spot(new_obj.id, "red_location", new_obj:name())
		start_small_timer(10, del_obj_by_id, se_obj.id)
		log("- Successfully")
	end
end

function init(obj)
--	printf("_bp: init(): name='%s'", obj:name())

	----------------------------------------------------------------------------------------
	-- Старые схемы
	----------------------------------------------------------------------------------------

	local ini = obj:spawn_ini()
	if ini and ini:section_exist("animation") then
		--obj:bind_object(handing_lamp_binder(obj))
		abort("object '%s': animation section is deprecated, use logic + impulse combination",
			obj:name())
		return
	end

	----------------------------------------------------------------------------------------
	-- Новые схемы
	----------------------------------------------------------------------------------------

	-- Биндить предмет нет смысла, если у него нет секции logic
	if (not ini) or (not ini:section_exist("logic")) then
		-- Прожектор нужно биндить даже без logic
		if ini and not ini:section_exist("drop_box") then
			local cls = obj:clsid()
			if cls ~= clsid.projector then
				if clsid_for_fix[cls] then
					obj:bind_object( physics_fix_binder(obj) )
				end
				return
			end
		end
	end

	local new_binder = generic_physics_binder(obj)
	obj:bind_object(new_binder)
end

------------------------------------------------------------
class "physics_fix_binder" (object_binder)
function physics_fix_binder:__init(obj) super(obj)
end
function physics_fix_binder:update(delta)
	object_binder.update(self, delta)

	if not self.ph_pos_fixed then
		physics_position_fix(self.object)
		self.ph_pos_fixed = true
	end
end
---------------------------------------------------------------------------------------------
class "generic_physics_binder" (object_binder)
function generic_physics_binder:__init(obj) super(obj)
	self.initialized = false
	self.loaded = false
end 

function generic_physics_binder:reload(section)
	object_binder.reload(self, section)
end

function generic_physics_binder:reinit()
	object_binder.reinit(self)

	--printf("generic_physics_binder:reinit()")

	--printf("_bp: generic_physics_binder: %s", self.object:name())
	db.storage[self.object:id()] = { }

	self.st = db.storage[self.object:id()]
	self.health=self.object:get_car() and self.object:get_car():GetfHealth()
end

function generic_physics_binder:update(delta)
	object_binder.update(self, delta)

	if (not self.initialized) and Actor then
		self.initialized = true
		xr_logic.initialize_obj(self.object, self.st, self.loaded, Actor, modules.stype_item)        

        --' Запускаем ассоциированный с объектом партикл.
        local particle = utils.cfg_get_string(self.st.ini, self.st.section_logic, "particle", self.object, false, "", nil)
        if particle ~= nil then
            self.particle = particles_object(particle)
            self.particle:play_at_pos(self.object:position())
        end

        --' Дизаблим ассоциированный с объектом граф
        local graph_point_marker = utils.cfg_get_string(self.st.ini, self.st.section_logic, "graph_point_marker", self.object, false, "", nil)
        if graph_point_marker ~= nil then
            self.disable_graph_point = patrol(graph_point_marker):game_vertex_id(0)
            GGraph:accessible(self.disable_graph_point, false)
            -- printf("GRAPH POINT DISABLED")
        end
		
		if clsid_for_fix[ self.object:clsid() ] then
			if self.st.active_scheme ~= "ph_gate" then
				physics_position_fix(self.object)
			end
		end
	end

	if self.st.active_section ~= nil
		or (self.object:spawn_ini() ~= nil
		and self.object:spawn_ini():section_exist("drop_box") == true)
	then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "update", delta)

		self.object:set_callback(callback.hit, self.hit_callback, self)
		self.object:set_callback(callback.death, self.death_callback, self)
		self.object:set_callback(callback.use_object, self.use_callback, self)

		-- для бтра hit_callback и death_callback не вызывается. заткнём эти дырки.
		if self.health and (not self.nofixonhit) then
		  local health=self.object:get_car() and self.object:get_car():GetfHealth()
		  if health then
			if health < 0 then
				self:btr_death_callback()
			elseif self.health-health>0.001 then
				--get_console():execute("load ~~~ health: "..self.health)
				--get_console():execute("load ~~~ health on hit: "..health)
				if actor_active_item then
					local sec = actor_active_item:section()
					if weapon_immunity_btr(sec) then	-- Оружие, против которого у бтр иммунитет
						health = 1

					elseif not weapon_against_btr(sec) then	-- Усиление бтр против всего, кроме отдельных стволов
						if self.health-health > 0.1 then
							health = self.health-0.1
						end
						
					end
				else
					health = 1
				end
				self.object:get_car():SetfHealth(health)
			
				-- amk.mylog("health decrease for "..self.object:name())
				self.health=health
				self:hit_callback(self.object, self.health-health, vector():set(1,0,0), Actor, 0)
				self.nofixonhit=nil
			end
		  end
		end
	end
end

function generic_physics_binder:net_spawn(data)
	if not object_binder.net_spawn(self, data) then
		return false
	end

	if self.object:clsid() == clsid.projector then
		db.add_sl(self.object)
	elseif string.find(self.object:section(), "vehicle_btr") then
		db.add_btr(self.object)
	end

	local sini = self.object:spawn_ini()
	if sini ~= nil and sini:section_exist("drop_box") == true then
		self.box_items = xr_box.ph_item_box(self.object)
	end

	-- car_physic_fix
	if self.object:clsid() == clsid.car_s and self.object:section() ~= "vehicle_btr" then
		local h = hit()
		h.draftsman = self.object
		h.type = hit.strike
		h.direction = vector()
		h.power = 0.0001
		h.impulse = 0.0001
		self.object:hit(h)
	end

	amk.on_net_spawn(self.object)

	return true
end

function generic_physics_binder:net_destroy()
	local st = db.storage[self.object:id()]
	if st.active_scheme then
		xr_logic.issue_event(self.object, st[st.active_scheme], "net_destroy")
	end

    if self.particle ~= nil then
        self.particle:stop()
    end

	db.del_sl(self.object)

	if string.find(self.object:section(), "vehicle_btr") then
		db.del_btr(self.object)
	end

	self.object:set_callback(callback.hit, nil)
	self.object:set_callback(callback.death, nil)
	self.object:set_callback(callback.use_object, nil)
	
	object_binder.net_destroy(self)
end

function generic_physics_binder:net_save_relevant()
	--printf("generic_physics_binder:net_save_relevant(): self.object:name()='%s'", self.object:name())
	return true
end

function generic_physics_binder:save(packet)
	--printf("generic_physics_binder:save(): self.object:name()='%s'", self.object:name())
	object_binder.save(self, packet)

	xr_logic.save_obj(self.object, packet)
end

function generic_physics_binder:load(reader)
	self.loaded = true

	--printf("generic_physics_binder:load(): self.object:name()='%s'", self.object:name())
	object_binder.load(self, reader)

	xr_logic.load_obj(self.object, reader)
end

function generic_physics_binder:use_callback(obj, who)
	--xr_use.notify_on_use(obj, who)

	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "use_callback", obj, who)
	end

	fly.returner_clear_pos()
	
	--AMK UTILS--
	if string.find(obj:section(),"vehicle_btr") then
		local snd = sound_object("weapons\\pm\\pm_shoot")
		snd:play_no_feedback(Actor, sound_object.s2d, 0, vector(), 1.0)
		snd = sound_object("characters_voice\\human_02\\military\\fight\\fire\\fire_"..tostring(math.random(1,5)))
		snd:play_no_feedback(Actor, sound_object.s2d, 0, vector(), 1.0)
		Actor:kill(obj)
	end
	--AMK UTILS--
end

function generic_physics_binder:hit_callback(obj, amount, local_direction, who, bone_index)
--	printf("_bp: generic_physics_binder:hit_callback: obj='%s'", obj:name())

	self.nofixonhit=true
	if self.st.ph_on_hit then
		xr_logic.issue_event(self.object, self.st.ph_on_hit, "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "hit_callback", obj, amount, local_direction, who, bone_index)
	end
	
end

function generic_physics_binder:death_callback(victim, who)
--	printf("_bp: generic_physics_binder:death_callback: obj='%s'", (victim and victim:name() or "nil"))
	if self.st.active_section then
		xr_logic.issue_event(self.object, self.st[self.st.active_scheme], "death_callback", victim, who)
	end

    if self.particle ~= nil then
        self.particle:stop()
    end

    if self.disable_graph_point ~= nil then
        GGraph:accessible(self.disable_graph_point, true)
    --	printf("GRAPH POINT ENABLED")
    end
	
	if self.box_items then
		self.box_items:spawn_items()
	end
end

function generic_physics_binder:btr_death_callback()
	if string.find(self.object:get_visual_name(), "btr") then
		xr_statistic.addKillCount(self.object)
	end

	if string.find(self.object:section(), "vehicle_btr") then
		--get_console():execute("load ~~~ btr_death_callback: "..self.object:id()))
		db.del_btr(self.object)
		
		if self.object:position():distance_to(Actor:position()) < 10 then
			local h = hit()
			h.draftsman = Actor
			h.direction = vector_rotate_y(Actor:direction(), 180) 
			h:bone("bip01_spine")
			h.type = hit.explosion
			h.power = 1000
			h.impulse = 2000
			Actor:hit(h)
		end
	end
end

-- Усиление БТР против всего, кроме рпг и РГ6 на время квеста по Сидору
function weapon_against_btr(wpn)
	return wpn == "wpn_rpg7"
		or (
			Actor:has_info("sidor_delo_start")
			and (not Actor:has_info("sidor_delo_have"))
			and (not Actor:has_info("sidor_delo_fail"))
			and level.name() == "l01_escape"
			and wpn == "wpn_rg-6"
		)
end

-- Оружие, против которого у бтр иммунитет
function weapon_immunity_btr(wpn)
	local wpns = {
		["wpn_kuvalda"] = true,
		["wpn_topor"] = true,
		["wpn_crowbar"] = true,
		["wpn_machete"] = true,
		["wpn_kukri"] = true,
	}
	return wpns[wpn]
end
