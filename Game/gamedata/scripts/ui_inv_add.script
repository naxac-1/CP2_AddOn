-- -*- mode: lua; encoding: windows-1251 -*-
local edibles = {}		-- всё съедобное, что можно положить в ячейку (секция = true), заполняется из конфига 'misc\inv_add.ltx'
local slot2section = {}	-- то, что находится в ячейках (слот = секция), храним в псторе
local section2slot = {}	-- то, что находится в ячейках (секция = слот)
local slot2key = {}		-- клавиши использования предметов (слот = код клавиши)
local slot2bind = {
	[1] = key_bindings.kUSE_MEDKIT,
	[2] = key_bindings.kUSE_BANDAGE,
	[3] = key_bindings.kEXT_1,
	[4] = key_bindings.kCAM_4
}

local wnd = nil

local drag_drop_use = {
	['repair_item_outfit'] = function (repkit, item)
		if item:is_outfit() then
			repair_check.repair_repkit(repkit, item)
		end
	end,
	['repair_item_weapon'] = function (repkit, item)
		if item:is_weapon() then
			repair_check.repair_repkit(repkit, item)
		end
	end,
	["doc_1"] = function(doc, outfit)
		if outfit:section() == "exo_mil_exoskeleton" then
			meceniy_outfit.doc_use(outfit, doc)
			zvuki.use_snd("doc_1")
		end
	end,
	["doc_8"] = function(doc, outfit)
		if outfit:section() == "exo_mil_exoskeleton_add" then
			meceniy_outfit.doc_use_2(outfit, doc)
			zvuki.use_snd("doc_8")
		end
	end,
	["doc_10"] = function(doc, outfit)
		if outfit:section() == "exo_mil_exoskeleton_addr" then
			meceniy_outfit.doc_use_3(outfit, doc)
			zvuki.use_snd("doc_10")
		end
	end
}
	

class "InvWnd" (CUIScriptWnd)

function InvWnd:__init(owner) super()
	self.owner = owner
	self:InitControls()

	xr_s.subscribe( "inventory_open", self.inventory_open, {self = self} )
	xr_s.subscribe( "inventory_close", self.inventory_close, {self = self} )
end

function InvWnd:__finalize() end

function InvWnd:InitControls()
	self:Init(0, 0, 1024, 768)
	self:Enable(true)
	self.owner:AttachChild(self)
	self:Show(true)

	local xml = CScriptXmlInit()
	xml:ParseFile("ui_inv_add.xml")

	self.slots = {}
	for i = 1, 4 do
		local s = xml:InitStatic("slot"..i, self)
		self.slots[i] = s
		s:InitTexture("ui_slot_h")
		s:SetStretchTexture(true)
		s:SetColor(GetARGB(0, 255, 255, 255))
		
		s.icn = xml:InitStatic("slot_icon", s)
		s.icn:InitTexture("ui\\ui_icon_equipment")
		s.icn:SetStretchTexture(true)
		
		s.key = xml:InitStatic("slot_key", s)
		s.key:SetText(hotkeys.dik2key(slot2key[i]) or "")
		s.key:SetFont(GetFontSmall())
		
		local name = "qslot_"..i
		self:Register(s, name)
		self:AddCallbackEx(name, ui_events.STATIC_FOCUS_RECEIVED, self.qslot_focus, i)
		self:AddCallbackEx(name, ui_events.STATIC_FOCUS_LOST, self.qslot_focus_lost, i)
		self:AddCallbackEx(name, ui_events.WINDOW_LBUTTON_DB_CLICK, self.qslot_dbclick, i)
		
		self:DrawSlotIcon(i)
	end

	local st, name
	for i, j in ipairs( { inventory_slots.PISTOL, inventory_slots.RIFLE } ) do
		name = "wpn_slot_"..j
		st = xml:InitStatic(name, self)
		self:Register(st, name)
		self:AddCallbackEx(name, ui_events.STATIC_FOCUS_RECEIVED, self.wpn_slot_focus, j)
		self:AddCallbackEx(name, ui_events.STATIC_FOCUS_LOST, self.wpn_slot_focus_lost, j)
	end

	self.rad_level = xml:InitProgressBar("radiation_progress", self)
	self.rad_upd_time = 1000

	self.accumm_slot = xml:InitFrame("accumm_slot", self)
	self.accumm_slot.line = xml:InitStatic("accumm_slot:line", self.accumm_slot)
	self.accumm_slot.grid = xml:InitStatic("accumm_slot:grid", self.accumm_slot)
	self:Register(self.accumm_slot.grid, "accumm_slot")
	self:AddCallbackEx("accumm_slot", ui_events.STATIC_FOCUS_RECEIVED, self.acum_slot_focus)
	self:AddCallbackEx("accumm_slot", ui_events.STATIC_FOCUS_LOST, self.acum_slot_focus_lost)

	self.belt_plugs = {}
	local _st = xml:InitStatic("dragdrop_belt_plugs", self)
	local _st_pos = _st:GetWndPos()
	local _cell1 = xml:InitStatic("dragdrop_belt_plugs:cell", _st)
	local _cell_size = _cell1:GetWndSize()
	local n = _st:GetWidth() / _cell_size.x
	_cell1:Show(false)
	self.belt_plugs[1] = _cell1
	for i = 2, n do
		local _cell = xml:InitStatic("dragdrop_belt_plugs:cell", self)
		_cell:Init(
			_st_pos.x+_cell_size.x *(i-1),
			_st_pos.y,
			_cell_size.x,
			_cell_size.y
		)
		_cell:Show(false)
		self.belt_plugs[i] = _cell
	end
	_st_pos,_cell_size = nil,nil

	self.DescrWnd = ui_inv_descr.CUIDescriptionWnd(self)
end

function InvWnd:CheckBeltPlugs(outfit)
	if not outfit then outfit = "without_outfit" end
	local bs = sys_ini:r_u32(outfit, "belt_slots")
	for i, v in ipairs(self.belt_plugs) do
		v:Show(bs < i)
	end
end

function InvWnd:InitAccummSlot()
	if not self.subscribed then return end

	local outfit = Actor:get_current_outfit()
	local sect = outfit and outfit:section()

	self:CheckBeltPlugs(sect)

	if (not sect) or not ( sys_ini:line_exist(sect, "energy_consuming")
		and sys_ini:r_bool(sect, "energy_consuming") == true )
	then
		self.accumm_slot:Show(false)
		return
	end

	if not self.exo_panel then
		self.exo_panel = ui_skat_input.UIExoControl(self)
		self.exo_panel:CheckOutfit(outfit, true)
		self.DescrWnd.frame:BringToTop()
	end

	if not self.accumm_slot.btn then
		local sz = self.accumm_slot.grid:GetWndSize()
		local b = CUIStatic()
		b:SetAutoDelete(true)
		b:SetStretchTexture(true)
		b:Init("ui\\ui_icon_equipment", 0, 0, sz.x, sz.y)
		self.accumm_slot.grid:AttachChild(b)
		self.accumm_slot.btn = b
		self:Register(b, "accumm_btn")
		self:AddCallbackEx("accumm_btn", ui_events.WINDOW_LBUTTON_DB_CLICK, self.RemoveAccumm)
	end

	if self.fake_accumm then
		self.fake_accumm:destroy()
	end

	local cond = outfit:get_charge_level()
	if (cond or 0) == 0 then
		self.accumm_slot.btn:SetOriginalRect( 0, 0, 1, 1 )
		self.fake_accumm = nil
	else
		local binder = outfit:binded_object()
		local accumm_sect = binder and binder:get_current_accumm()
		if accumm_sect then
			local icn = GetIconParams(accumm_sect)
			self.accumm_slot.btn:SetOriginalRect( icn.x, icn.y, icn.w, icn.h )
			self.fake_accumm = fake_inventory_item.fake_item( {
				s = accumm_sect,
				c = cond
			} )
		else
			self.accumm_slot.btn:SetOriginalRect( 0, 0, 1, 1 )
			self.fake_accumm = nil
		end
	end
	self.accumm_slot:Show(true)
end
function InvWnd:CheckAccumm(item)
	if actor_outfit then
		self:on_drag_drop(item, actor_outfit)
		self:InitAccummSlot()
	end
end

function InvWnd:RemoveAccumm()
	if actor_outfit then
		local binder = actor_outfit:binded_object()
		if binder and binder.energy_consuming then
			binder:unload_accumm()
			self:InitAccummSlot()
		end
	end
end
function InvWnd:acum_slot_focus()
	self.acum_slot_in_focus = true
	if self.fake_accumm then
		self.DescrWnd:OnItemFocus(self.fake_accumm)
	end
end
function InvWnd:acum_slot_focus_lost()
	self.acum_slot_in_focus = nil
	if self.fake_accumm then
		self.DescrWnd:OnItemFocusLost(self.fake_accumm)
	end
end

local reg_callbacks = {
	item_drop = "on_item_drop",
	item_take = "on_item_take",
	drag_drop = "on_drag_drop",
	update = "on_update"
}

function InvWnd:inventory_open()
	for k,v in pairs(reg_callbacks) do
		xr_s.subscribe( k, self[v], {self = self} )
	end
	self.subscribed = true
	-- update slots color
	for i, sec in ipairs(slot2section) do
		if sec~="" then
			if Actor:object(sec)~=nil then
				self.slots[i].icn:SetColor( GetARGB(255, 255, 255, 255) )
			else
				self.slots[i].icn:SetColor( GetARGB(70, 200, 200, 200) )
			end
		end
	end
	self.DescrWnd:subscribe()
	self:InitAccummSlot()

	bind_actor.hide_weapon("inv")
	xr_actor.change_move("inv", false)

	self.use_dik = bind_to_dik(key_bindings.kUSE)
	get_console():execute("unbind use")
end

function InvWnd:inventory_close()
	if self then
		for k,v in pairs(reg_callbacks) do
			xr_s.unsubscribe(k, self[v])
		end
	end
	self.DescrWnd:unsubscribe()
	self.subscribed = false

	amk.save_table("quick_slots", slot2section)
	bind_actor.restore_weapon("inv")
	xr_actor.change_move("inv", true)

	local key = hotkeys.dik2key( self.use_dik )
	if not key:find("MOUSE") then key = "k"..key end
	get_console():execute( "bind use "..string.lower(key) )
end

function InvWnd:qslot_focus(i)
	local sect = slot2section[i]
	if sect~="" then
		local obj = Actor:object(sect)
		if obj then
			self.DescrWnd:OnItemFocus(obj)
		end
	end
	self.quick_slot = i
	self.slots[i]:SetColor(GetARGB(45, 255, 255, 255))
end
function InvWnd:qslot_focus_lost(i)
	if i == self.quick_slot then
		local sect = slot2section[i]
		if sect~="" then
			local obj = Actor:object(sect)
			if obj then
				self.DescrWnd:OnItemFocusLost(obj)
			end
		end
		self.quick_slot = nil
	end
	self.slots[i]:SetColor(GetARGB(0, 255, 255, 255))
end
function InvWnd:qslot_dbclick(i)
	local sect = slot2section[i]
	local obj = Actor:object(sect)
	if obj then
		if inventory.search(sect, 2) == false then
			self.DescrWnd:OnItemFocusLost(obj)
		end
		Actor:eat(obj)
	end
end

function InvWnd:wpn_slot_focus(n)
	self.wpn_slot = n
end
function InvWnd:wpn_slot_focus_lost(n)
	if n == self.wpn_slot then
		self.wpn_slot = nil
	end
end

function InvWnd:on_drag_drop(drag_item, drop_on_item)
	local section = drag_item:section()
	if drop_on_item then
		if drag_drop_use[section] then
			drag_drop_use[section](drag_item, drop_on_item)
			return
		end

		local sec = drop_on_item:section()
		if sys_ini:line_exist(sec, "container_slots") then
			if arc_ui_container_menu.item_can_move_to_container( section, drag_item:is_artefact() ) then
				arc_containers.put_item_to_container(drag_item, drop_on_item)
			end
			return
		end

		if sys_ini:r_bool_ex(sec, "energy_consuming", false) == true then
			local energy_src = sys_ini:r_list(sec, "energy_source")
			if energy_src then
				if table.find(energy_src, "artefact") then
					if drag_item:is_artefact() then
						this.charge_device(drag_item, drop_on_item)
					end
				elseif table.find(energy_src, section) then
					local binder = drop_on_item:binded_object()
					if binder then
						if binder:charge( drag_item:condition(), section ) then
							del_obj_by_id( drag_item:id() )
							zvuki.use_snd(section)
							if actor_outfit and actor_outfit:id() == drop_on_item:id() then
								self:InitAccummSlot()
							end
						end
					else
						drop_on_item:set_condition(1)
						netpk:modify( AI:object(drop_on_item:id()), {condition = 1} )
						del_obj_by_id( drag_item:id() )
						zvuki.use_snd(section)
					end
				end
			end
		end
	else
		if self.quick_slot and edibles[section] then
			-- Проверим, вдруг этот предмет уже есть в какой-то из ячеек
			local n = section2slot[section]
			if n then
				if n == self.quick_slot then	-- в той же самой ячейке, ничего не делаем
					return
				end
				-- не в той, над которой отпустили клавишу
				-- очищаем слот
				slot2section[n] = ""
				self:DrawSlotIcon(n)
			end
			-- удаляем из таблицы старый предмет
			section2slot[slot2section[self.quick_slot]] = nil
			-- Записываем новую секцию, обновляем иконку
			section2slot[section] = self.quick_slot
			slot2section[self.quick_slot] = section
			self:DrawSlotIcon(self.quick_slot)
		elseif self.acum_slot_in_focus then
			self:CheckAccumm(drag_item)
		end
	end

	if self.wpn_slot and isMagazinedWeapon( drag_item ) then
		local item_slot = drag_item:get_slot()
		if item_slot ~= inventory_slots.PISTOL and item_slot ~= inventory_slots.RIFLE then return end
		if self.wpn_slot == item_slot then return end

		local forced_move = false
		if Actor:is_in_slot( drag_item ) then
			Actor:move_to_ruck( drag_item )
			forced_move = true
		end

		local item_in_slot = Actor:item_in_slot( self.wpn_slot )
		if item_in_slot then
			Actor:move_to_ruck( item_in_slot )
			forced_move = true
		end

		drag_item:set_slot( self.wpn_slot )
		
		if forced_move then Actor:move_to_slot( drag_item ) end
	end
end

function InvWnd:DrawSlotIcon(n)
	local s = self.slots[n]
	local sect = slot2section[n]
	local sz = GetIconParams(sect)
	
	s.icn:SetOriginalRect(sz.x, sz.y, sz.w, sz.h)
	if sect~="" and Actor:object(sect)~=nil then
		s.icn:SetColor(GetARGB(255, 255, 255, 255))
	else
		s.icn:SetColor(GetARGB(70, 200, 200, 200))
	end
end

function InvWnd:DetachWnd()
	self.DescrWnd:Remove()
	self.DescrWnd = nil
	if self.exo_panel then
		self.exo_panel:Remove()
		self.exo_panel = nil
	end
	self:ClearCallbacks()
	self.owner:DetachChild(self)
	self.owner = nil
	if self.fake_accumm then
		self.fake_accumm:destroy()
	end

	xr_s.unsubscribe( "inventory_open", self.inventory_open )
	xr_s.unsubscribe( "inventory_close", self.inventory_close )
end

------------------------------------------------------------------------------------------
function InvWnd:on_item_take(item)
	local sect = item:section()
	-- получили первый предмет из ячейки при открытом инвентаре
	if section2slot[sect] and inventory.search(sect, 2)==false then
		self.slots[section2slot[sect]].icn:SetColor(GetARGB(255, 255, 255, 255))
	end
end
function InvWnd:on_item_drop(item)
	local sect = item:section()
	-- использовали последний предмет из ячейки при открытом инвентаре
	if section2slot[sect] and inventory.search(sect)==false then
		self.slots[section2slot[sect]].icn:SetColor(GetARGB(70, 200, 200, 200))
	end
end

function InvWnd:on_update( delta )
	self.rad_upd_time = self.rad_upd_time + delta
	if self.rad_upd_time > 1000 then
		self.rad_upd_time = 0
		if arc_inventory.IsRadDetected() then
			self.rad_level:SetProgressPos( 100 * math.min(arc_radiation.RAD_DOSE/arc_radiation.DOSE_DEADLY, 1) )
		else
			self.rad_level:SetProgressPos(0)
		end
	end
end
--------------------------------------------------------------------------------------------------

-- Чтобы не было глюков при продаже неписям
function restore_slot( item )
	if isMagazinedWeapon( item ) and AI:object( item:id() ) then
		local slot = item:get_slot()
		local ini_slot = sys_ini:r_u32( item:section(), "slot" )
		if ini_slot ~= slot then
			item:set_slot( ini_slot )
		end
	end
end

function slot_fix( id, item )
	local slot = item:get_slot()
	item:set_slot( inventory_slots.PISTOL + inventory_slots.RIFLE - slot )
--	Actor:move_to_slot( item )
end

-- Шкала состояния на иконках оружия и брони
local tex_name, tex_rect = get_texture_info( "ui_inventory_item_status_bar" )
function on_create_cell_item( item )
	local st = CUIFrameWindow():GetTitleStatic()
	if not st then return end

	-- рисуем шкалу состояния
	if need_show_condition(item) then
		local section = item:section()
		local icn_h = sys_ini:r_u32(section, "inv_grid_height")
		local x = 2
		local y = 35 * icn_h - 6
		local w = 30*kScreen
		local h = 4

		local b = CUIStatic()
		b:SetAutoDelete( true )
		b:Init( "ui_inventory_item_status_bar", x, y, w, h )
		b:SetStretchTexture( true )
		b:SetColor( GetARGB( 180, 255, 255, 255 ) )
		st:AttachChild( b )

		local cond = item:condition()
		local s = CUIStatic()
		s:SetAutoDelete( true )
		s:Init( tex_name, 0, 0, w*cond, h )
		s:SetOriginalRect( tex_rect.x1, tex_rect.y1, tex_rect.x2*cond, tex_rect.y2 )
		s:SetStretchTexture( true )
		local g = math.min( cond*510, 255 )
		local r = math.min( (1-cond)*510, 255 )
		s:SetColor( GetARGB( 255, r, g, 0 ) )
		b:AttachChild( s )
------------------------------
		if is_upgraded(section) then
			local u = CUIStatic()
			u:SetAutoDelete( true )
			u:Init( "ui\\ui_upgrade_icon", 3*kScreen, 3, 11*kScreen, 11 )
			u:SetStretchTexture( true )
			st:AttachChild( u )
		end
------------------------------
	end
end
------------------------------------------------------------------------------------------
-- from ui_mm_opt_main
function on_options_change()
	if not (Actor and Actor:alive()) then
		return
	end

	start_small_timer(300, function()
		for i, v in ipairs(slot2bind) do
			slot2key[i] = bind_to_dik(v)
		end
	end)
end
------------------------------------------------------------------------------------------
function getSlots()	return slot2section	end
function getSlotKey(slot) return slot2key[slot] end
------------------------------------------------------------------------------------------
function show_inv_msg( text, type, showtime )
	if wnd then
		wnd.DescrWnd:HideDescription()
		BlockUIDescr( true )
	end
	local msgbox_type = "ok_"..(type or "info")
	start_small_timer( 200, ShowMessageBox, msgbox_type, text, false, false, showtime or 3000 )
end
------------------------------------------------------------------------------------------
function charge_device( art, device )
	local power = artefact_hunter.get_art_power( art:section() )
	if power == 0 then return end

	local cond = device:condition()
	if cond > 0.98 then
		ui_inv_add.show_inv_msg("st_no_need_charge")
		return
	end

	local k = ( 3 - level.get_game_difficulty() ) / 10
	local add_power = power + power*k
	local new_cond = math.min( cond + add_power, 1 )
	device:set_condition( new_cond )
	netpk:modify( AI:object( device:id() ), { condition = new_cond }, netpk.fState )

	del_obj_by_id( art:id() )
	zvuki.use_snd( art:section() )

	local rem = cond + add_power - 1
	if rem > 0 then
		inventory.create_cond_item_to_actor( "af_buliz", math.min(0.4 + 0.6*rem, 1) )
	end
end

function reinit_accumm_slot()
	if not wnd then return end
	wnd:InitAccummSlot()
end
------------------------------------------------------------------------------------------
function on_net_spawn()
	-- Заполняем таблицы
	-- съедобное - несъедобное
	local ini = ini_file("misc\\inv_add.ltx")
	local res,id,val
	for i = 0, ini:line_count("edibles")-1 do
		res,id,val = ini:r_line("edibles",i,"","")
		edibles[id] = true
	end
	-- то, что в слотах
	slot2section = amk.load_table("quick_slots")
	if #slot2section==0 then
		for i = 1, 4 do
			slot2section[i] = ini:r_string("def_slots", "slot_"..i)
		end
	end
	for i,s in ipairs(slot2section) do
		if s~="" then section2slot[s] = i end
	end
	-- клавиши
	for i, v in ipairs(slot2bind) do
		slot2key[i] = bind_to_dik(v)
	end
end

function init_wnd()
	local inv_wnd = level.get_inventory_wnd()
	if inv_wnd then
		wnd = InvWnd(inv_wnd)
	end
end
function on_net_destroy()
	local inv_wnd = level.get_inventory_wnd()
	if inv_wnd and wnd then
		wnd:DetachWnd()
	end
	wnd = nil
end

function attach()
	xr_s.subscribe("net_spawn", this.on_net_spawn)
	xr_s.subscribe("first_update", this.init_wnd)
	xr_s.subscribe("net_destroy", this.on_net_destroy)
--	xr_s.subscribe("item_drop", this.restore_slot)
	xr_s.subscribe("cell_item_create", this.on_create_cell_item)
end


