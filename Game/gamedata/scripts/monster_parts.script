-- -*- mode: lua; encoding: windows-1251 -*-
-- Отрезание запчастей монстров ножом и озвучка. Для отрезания достаточно, чтобы нож был в рюкзаке.
local monster = nil
local snd = nil

local is_monster_part = {}

-- Ножи, которыми можно отрезать
local knives = {
	"wpn_addon_shtyk_nozh",
	"wpn_bat_a",
	"wpn_bat_b",
	"wpn_elf",
	"wpn_knif2",
	"wpn_knif3",
	"wpn_knif4",
	"wpn_knifa",
	"wpn_knife",
	"wpn_knife_m",
	"wpn_knife_n",
	"wpn_knife_new",
	"wpn_machete",
	"wpn_kukri",
	"wpn_topor"
}
local timer_start = false
local parts = {}
local dont_take_timer = 0

function on_part_take(obj)
	local b = is_monster_part[obj:section()]

	if b == nil then
		local sect = obj:section()
		b = sys_ini:r_bool_ex(obj:section(), "monster_part", false)
		is_monster_part[sect] = b
	end

	if timer_start then
		if b then parts[obj:id()] = obj:section() end
		return
	end

	if not ( monster and b ) then return end

	local knife = actor_has_knife()
	if knife then
		local gd = level.get_game_difficulty()

		local d = sys_ini:r_float(knife:section(), "condition_shot_dec")
		hotkeys.knife_deterioration(knife, gd*d)

		snd = xr_sound.get_safe_sound_object("zwuk\\inv_mutant_loot_"..math.random(1,9))
		snd:play_at_pos(Actor, vector(), 0, sound_object.s2d)

		if gd > game_difficulty.novice then
			bind_actor.hide_weapon("monter_parts")

			local t = {
				timer = real_time_ms + gd*2000,	--snd:length(),
				pos = Actor:position(),
				parent = monster:id()
			}
			xr_s.subscribe( "update", monster_parts.check_move, { userobj = t } )

			level.start_stop_menu(level.main_input_receiver(), true)

			parts = {}
			parts[obj:id()] = obj:section()
			timer_start = true
		end
	else
		Actor:transfer_item(obj, monster)
		if dont_take_timer > real_time_ms then return end
		level.start_stop_menu(level.main_input_receiver(), true)
		dont_take_timer = real_time_ms + 500
		local msg = string.format( game.translate_string("st_parts_hasnt_knife"),
			game.translate_string( get_inv_name( obj:section() ) ) )
		ShowMessageBox("ok_alarm", msg, false, false, 2500)
	end
end

function actor_has_knife()
	local item = Actor:item_in_slot(inventory_slots.KNIFE)
	if item and table.find(knives, item:section()) then
		return item
	end
	return nil
end

function on_monster_use(victim, who)
	xr_s.subscribe("item_take", monster_parts.on_part_take)
	monster = victim
end

local tmr = nil
function on_monster_stop_use()
	remove_small_timer(tmr)
	tmr = start_small_timer(200, function()
		xr_s.unsubscribe("item_take", monster_parts.on_part_take, true)
	end)
	monster = nil
end

function check_move(delta, p)
	if p.timer > real_time_ms then
		local actor_pos = Actor:position()
		local npc = level.object_by_id(p.parent)
		if ( npc and (actor_pos:distance_to_sqr(p.pos) > 0.1
			or actor_pos:distance_to_sqr( npc:center() ) > 4) )
			or (monster ~= nil and monster:id() ~= p.parent)
			or (level.main_input_receiver() ~= nil and monster == nil)
		then
			bind_actor.restore_weapon("monter_parts")
			if snd and snd:playing() then snd:stop() end
			
			local item
			if npc then
				for i in pairs(parts) do
					item = level.object_by_id(i)
					if item then Actor:transfer_item(item, npc) end
				end
			else  -- мутант куда-то пропал?
				for i in pairs( parts ) do
					item = AI:object( i )
					if item then AI:release( item, true ) end
				end
			end
			parts = {}
			
			xr_s.unsubscribe("update", monster_parts.check_move, true)
			timer_start = false
		end
	else
		if snd and snd:playing() then snd:stop() end
		bind_actor.restore_weapon("monter_parts")
		timer_start = false
		send_trophy()
		archievements.acv_count_event("acv_gvdr", 1000, table.size(parts))
		parts = {}
		xr_s.unsubscribe("update", monster_parts.check_move, true)
	end
end

function send_trophy()
	if table.size(parts) == 0 then return end
	local tmp = {}
	local n
	for id, sect in pairs(parts) do
		table.add(tmp, sect)
	end
	
	local sms = "%c[green]Получены трофеи:\\n%c[default]"
	for sect, num in pairs(tmp) do
		sms = sms..game.translate_string(get_inv_name(sect))..
			( num>1 and " x"..num or "" ).."\\n"
	end
	
	local task_texture, task_rect = get_texture_info("ui_iconsTotal_found_thing")
	Actor:give_game_news(sms, task_texture, task_rect, 0, 5000)
end

