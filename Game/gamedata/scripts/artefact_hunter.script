-- -*- mode: lua; encoding: windows-1251 -*-

-- для каждого вида перчаток коэфициент пропуска силы поражения, которая останется от изначальной
local perchatki_propusk = {
	["wpn_fist_c1"]		= 0.7, -- ПРОРЕЗИННЫЕ
	["wpn_fist_c2"]		= 0.5, -- УСОВЕРШЕНСТВОВАННЫЕ
	["wpn_fist_c3"]		= 0.3, -- МОДЕРНИЗИРОВАННЫЕ
	["wpn_fist_c4"]		= 0.0  -- УНИКАЛЬНЫЕ
}

-- секции научных броников
local scient = {
	["merc_scientific_outfit"]		= 0.5,	-- Научный костюм наёмников и его модификации
	["scientific_outfit"]			= 0.5,	-- Научный костюм НЕЙТРАЛЬНОГО СТАЛКЕРА и его модификации
	["dolg_scientific_outfit"]		= 0.3,	-- Научный костюм ДОЛГА и его модификации
	["freedom_scientific_outfit"]	= 0.2,	-- Научный костюм Свободы и его модификации
	["monolit_scientific_outfit"]	= 0.2,	-- Научный костюм Монолита и его модификации
	["nebo_scientific_outfit"]		= 0.0,	-- НАУЧНЫЙ КОСТЮМ ЧИСТОГО НЕБА и его модификации
	["protection_outfit"]			= 0.0,	-- Комбинезон ССП-99М "Вега" и его модификации
	["ecolog_outfit"]				= 0.0,	-- ОБЫЧНЫЙ КОСТЮМ УЧЕННОГО и его модификации
	["nano_outfit"]					= 0.0,	-- Нанозащитный костюм "Стальной Крыс"
	["nano_suit"]					= 0.0,	-- Модернизированный нанокостюм
	["exo_knight_outfit"]			= 0.0,	-- Экзоскелет "Дон Кихот"
	["exo_doktor_outfit"]			= 0.0,	-- Экзоскелет Чёрного Доктора
	-- Akill begin
	["gagarin_outfit"]				= 0.0,	-- Бронекостюм Гагарин
	["gagarin_outfit_m1"]			= 0.0,	-- Мод. Гагарин
	["voshod_outfit"]				= 0.0,	-- Бронекостюм Восход
	-- Akill end
	["seva_scient_outfit"]			= 0.0,	-- Модифицированный комбинезон "СЕВА+"
	["exo_scientist_outfit"]		= 0.0   -- Научный экзоскелет
}

local artefacts = {}
local id2art = {}
local id2art_l = {}
local info2art = {}
local art2child = {}

function init()
	local ini = ini_file( "misc\\artefact_hunter.ltx" )
	local res, sec, id
	local h = 0
	for i = 0, ini:line_count( "artefacts" ) - 1 do
		res, sec, id = ini:r_line( "artefacts", i, "", "" )
		if sec and sys_ini:section_exist(sec) then
			local t = {}

			t.known = false

			if sys_ini:line_exist( sec, "art_parent" ) then
				t.parent = sys_ini:r_string( sec, "art_parent" )
				if art2child[t.parent] == nil then
					art2child[t.parent] = {}
				end
				table.insert( art2child[t.parent], sec )
			else
				id = tonumber(id)
				ASSERT( id and (id2art[id]==nil),
					"[artefact_hunter.init] error with id: %s :: %s",
					sec, tostring(id2art[id]) )
				id2art[id] = sec
				t.id       = id

				table.insert(id2art_l, sec)
				
				t.lvl      = sys_ini:r_u32   ( sec, "art_level"      )
				t.power    = sys_ini:r_float ( sec, "art_power"      )
				t.hit_type = sys_ini:r_string( sec, "art_hit_type"   )
				t.info     = sys_ini:r_list  ( sec, "art_known_info" )

				if t.info and #t.info > 0 then
					for j, v in ipairs( t.info ) do
						if info2art[v] == nil then
							info2art[v] = {}
						end
						table.insert( info2art[v], sec )
					end
				end
			end
			
			artefacts[sec] = t
		end
	end
--	table.print(artefacts)
	table.sort( id2art_l, function(s1, s2) return s1 < s2 end )
end
-----------------------------------------------------------------------------------------------
local cant_hit = true

function hit_by_art(obj)
	if _G["biznes_remove_special_item"] or cant_hit then return end
	if Actor:has_info("peshera_go") then return end

	local s = obj:section()
	if artefacts[s] and level.main_input_receiver() == nil then
		local propusk = 1

		local perchatki = Actor:item_in_slot( inventory_slots.KNIFE )
		if perchatki then
			propusk = perchatki_propusk[perchatki:section()] or 1
		end

		if actor_outfit then
			propusk = propusk * ( scient[actor_outfit:section()] or 1)
		end

		local p = propusk * get_art_power(s)
		if p > 0 then
			local h = hit()
			h.draftsman = Actor
			h.direction = vector():set(0,0,0)
			h.impulse = 0.3
			h.type = hit[ artefacts[s].hit_type or "shock" ]
			h.power = p

			local cameffs ={"hit_front","hit_back","hit_front_left","hit_back_left","hit_front_right","hit_back_right"}
			level.add_cam_effector("camera_effects\\"..table.random(cameffs)..".anm", 999, false, "")
			Actor:hit(h)
		end
	end
end

function on_slot(item)
	local sect = item:section()
	if perchatki_propusk[sect] then
		if actor_outfit and scient[actor_outfit:section()]~=nil then
			Actor:move_to_ruck(item)
		end
	elseif scient[sect] then
		local knife = Actor:item_in_slot( inventory_slots.KNIFE )
		if knife and perchatki_propusk[knife:section()] then
			Actor:move_to_ruck(knife)
		end
	end
end

function first_update()
	cant_hit = false
end
-----------------------------------------------------------------------------------------------
function is_known_art(section)
	local t = artefacts[section]
	if t == nil then return true end
	if has_alife_info("peshera_go") then return true end
	if t.parent then return artefacts[t.parent].known end
	return t.known
end

function add_art_info(art)
	local t = artefacts[art]
	if not t then return end

	if t.known == true then return end

	t.known = true

	local task_texture, task_rect = get_texture_info("ui_iconsTotal_locations", "ui_iconsTotal_locations")
	local news_text = format_text_pairs(
		game.translate_string( "st_art_info_give" ),
		{ artefact = game.translate_string( get_inv_name(art) ) }
	)
	Actor:give_game_news(news_text, task_texture, task_rect, 0, 5000)
	if Actor:is_talking() then
		local icon = GetIconParams(art)
		Actor:give_talk_message(news_text, "ui\\ui_icon_equipment", Frect():set(icon.x, icon.y, icon.w, icon.h), "iconed_icon_item")
	end	
end

function get_art_name(section, need_level)
	if is_known_art(section) then
		return get_inv_name(section)
	end

	if need_level then
		return "unknown_art_"..tostring( artefacts[section].lvl )
	end

	return "unknown_art"
end
-----------------------------------------------------------------------------------------------
function get_art_power(section)
	local t = artefacts[section]
	return t.power or (t.parent and artefacts[t.parent].power) or 0
end
-----------------------------------------------------------------------------------------------
function on_info(info_id)
	local t = info2art[info_id]
	if t then
		for i, art in ipairs(t) do
			this.add_art_info(art)
		end
	end
end

function load(reader)
	if reader:r_eof() then
		this.first_run()
		return
	end
	-- old
	local n = reader:r_u8()
	if n ~= 255 then
		local id
		for i = 1, n do
			id = reader:r_u8()
			if id ~= 0 and id2art_l[id]  then
				artefacts[ id2art_l[id] ].known = true
			end
		end
		id2art_l = nil
		return
	end
	id2art_l = nil
	-- new
	n = reader:r_u8()
	if n == 0 then return end

	local id
	for i = 1, n do
		id = reader:r_u8()
		ASSERT(id2art[id], "[artefact_hunter.load] no section for saved id %s", id)
		artefacts[ id2art[id] ].known = true
	end
end
function save(packet)
	packet:w_u8(255)

	local tmp = {}
	for s, t in pairs(artefacts) do
		if t.known then
			table.insert(tmp, t.id)
		end
	end

	packet:w_u8(#tmp)
	for i, v in ipairs(tmp) do
		packet:w_u8(v)
	end
end

function first_run()
	for info, tbl in pairs(info2art) do
		if has_alife_info(info) then
			for i, art in ipairs(tbl) do
				local t = artefacts[art]
				if not t.known then
					t.known = true
					log("~ add known artefact [%s], info [%s]", art, info)
				end
			end
		end
	end
end
-----------------------------------------------------------------------------------------------
local info_traders = {
	[story_ids.Escape_Trader]      = { name = "sidor",    lvl = 6, pay = 0.15 },
	[story_ids.bar_Barman]         = { name = "barman",   lvl = 7, pay = 0.10 },
	[story_ids.yan_general_ecolog] = { name = "sakharov", lvl = 7, pay = 0.05 },
	[story_ids.Mil_Miser]          = { name = "scryaga",  lvl = 5, pay = 0.17 },
	[story_ids.Sak]                = { name = "sak",      lvl = 6, pay = 0.07 },
	[story_ids.Doktor]             = { name = "doctor",   lvl = 7, pay = 0.02 }
}
info_traders[story_ids.Doktor1]       = info_traders[story_ids.Doktor]
info_traders[story_ids.Doktor_dcity2] = info_traders[story_ids.Doktor]

function init_known_art_dialog( dlg, str_sid )
	local sid = story_ids[str_sid]
	ASSERT(sid, "[init_known_art_dialog] story_id not exist: %s", str_sid)
	local t = info_traders[sid]
	ASSERT(t, "[init_known_art_dialog] trader with story_id %s[%s] not found in 'info_traders'", str_sid, sid)

	local get_string = game.translate_string
	local p = "known_art_"..t.name
	local fmt = {}
	fmt.actor = Actor:character_name()

	local phr = dlg:AddPhrase( p.."_0", "0", "", -10000 )
	local phrase_script

	phr = dlg:AddPhrase( p.."_1", "1", "0", -10000 )
	phrase_script = phr:GetPhraseScript()
	phrase_script:AddHasInfo("art_hunter_about_pay_info")

	local pay = t.pay
	fmt.pay = tostring(math.ceil(pay*100))
	phr = dlg:AddPhrase( format_text_pairs(get_string("known_art_pay_11"), fmt ), "11", "0", -10000 )
	phrase_script = phr:GetPhraseScript()
	phrase_script:AddDontHasInfo("art_hunter_about_pay_info")
	fmt.pay = nil

	phr = dlg:AddPhrase( "known_art_pay_12", "12", "11", -10000 )

	phr = dlg:AddPhrase( "known_art_pay_13", "13", "12", -10000 )
	phrase_script = phr:GetPhraseScript()
	phrase_script:AddGiveInfo("art_hunter_about_pay_info")

	phr = dlg:AddPhrase( "known_art_pay_111", "111", "11", -10000 )
	phrase_script = phr:GetPhraseScript()
	phrase_script:AddAction("dialogs.break_dialog")

	local text = ""
	local lvl = t.lvl
	local f = false
	local phr_id
	for i, sect in pairs(id2art) do
		local n = tostring( math.random(1,10) )

		phr_id = tostring( 1000+i )
		phr = dlg:AddPhrase( "known_art_ask_"..n, phr_id, "1", -10000 )
		phrase_script = phr:GetPhraseScript()
		phrase_script:AddPrecondition("artefact_hunter.precondition_unknown_art")
		phrase_script:AddAction("artefact_hunter.show_art_icon")

		phr = dlg:AddPhrase( "", phr_id, "13", 0 )

		if lvl >= artefacts[sect].lvl then
			fmt.cost = get_art_cost( sect ) * pay
			text = format_text_pairs( get_string("known_art_know1_"..n), fmt )
			dlg:AddPhrase( text, tostring(2000+i), phr_id, -10000 )
			fmt.cost = nil
			
			phr = dlg:AddPhrase( "known_art_buy_info", tostring(3000+i), tostring(2000+i), -10000 )
			phrase_script = phr:GetPhraseScript()
			phrase_script:AddPrecondition("artefact_hunter.precondition_pay_art")
			
			dlg:AddPhrase( "known_art_not_buy_info", tostring(4000+i), tostring(2000+i), -10000 )
			
			fmt.art = get_string( sys_ini:r_string( sect, "inv_name" ) )
			text = format_text_pairs( get_string("known_art_know2_"..n), fmt )
			phr = dlg:AddPhrase( text, tostring(5000+i), tostring(3000+i), -10000 )
			phrase_script = phr:GetPhraseScript()
			phrase_script:AddAction("artefact_hunter.trader_add_art_info")
			fmt.art = nil
		else
			text = format_text_pairs( get_string("known_art_dont_know_"..n), fmt )
			dlg:AddPhrase( text, tostring(2000+i), phr_id, -10000 )
		end
	end

	phr = dlg:AddPhrase( p.."_2", "2",  "1", -10000 )
	phr = dlg:AddPhrase(      "", "2", "13",      0 )
end

function get_art_cost(section)
	return sys_ini:r_float(section, "cost")
end

function show_art_icon(first_speaker, second_speaker, dialog_id, phrase_id)
	local art = id2art[ tonumber(phrase_id) - 1000 ]
	local icon = GetIconParams(art)
	Actor:give_talk_message("", "ui\\ui_icon_equipment", Frect():set(icon.x, icon.y, icon.w, icon.h), "iconed_icon_item")
end
function precondition_unknown_art(first_speaker, second_speaker, dialog_id, prev_phrase_id, phrase_id)
	local trader = first_speaker:id() == 0 and second_speaker or first_speaker
	local t = info_traders[trader:story_id()]
	ASSERT(t, "[precondition_unknown_art] %s: trader's story_id[%s] is not found in 'info_traders'", trader:name(), trader:story_id())

	local art = id2art[ tonumber(phrase_id) - 1000 ]
	local obj = Actor:object( art )
	if not obj then
		if art2child[art] then
			for i, v in ipairs( art2child[art] ) do
				obj = Actor:object(v)
				if obj then break end
			end
		end
	end

	if obj then
		return is_known_art(art) == false
	end

	return false
end

function precondition_pay_art(first_speaker, second_speaker, dialog_id, prev_phrase_id, phrase_id)
	local trader = first_speaker:id() == 0 and second_speaker or first_speaker
	local t = info_traders[trader:story_id()]
	ASSERT(t, "[precondition_pay_art] %s: trader's story_id[%s] is not found in 'info_traders'", trader:name(), trader:story_id())

	local art = id2art[ tonumber(phrase_id) - 3000 ]
	local obj = Actor:object( art )
	if not obj then
		if art2child[art] then
			for i, v in ipairs( art2child[art] ) do
				obj = Actor:object(v)
				if obj then break end
			end
		end
	end

	if obj then
		return Actor:money() >= get_art_cost(art)*t.pay
	end

	return false
end

function trader_add_art_info(first_speaker, second_speaker, dialog_id, phrase_id)
	local trader = first_speaker:id() == 0 and second_speaker or first_speaker
	local t = info_traders[trader:story_id()]
	ASSERT(t, "[trader_add_art_info] %s: trader's story_id[%s] is not found in 'info_traders'", trader:name(), trader:story_id())

	local art = id2art[ tonumber(phrase_id) - 5000 ]

	dialogs.relocate_money(first_speaker, math.ceil( get_art_cost(art) * t.pay ), "out")

	this.add_art_info(art)
end
	
function has_unknown_arts()
	local sect
	local res = false
	Actor:iterate_inventory(function (dummy, item)
		sect = item:section()
		if artefacts[sect] then
			if not is_known_art(sect) then
				res = true
			end
		end
	end,
	nil)
	return res
end

function trader_know_art(npc, section)
	local t = artefacts[section]
	if not t then
		return true
	end

	if t.parent then
		t = artefacts[t.parent]
	end

	local sid = npc:story_id()
	local b = true
	if info_traders[sid] then
		b = ( t.lvl <= info_traders[sid].lvl )
	end

	return b and t.known
end

function init_sidor_known_art_dialog( dlg )
	init_known_art_dialog( dlg, "Escape_Trader" )
end
function init_barman_known_art_dialog( dlg )
	init_known_art_dialog( dlg, "bar_Barman" )
end
function init_sakharov_known_art_dialog( dlg )
	init_known_art_dialog( dlg, "yan_general_ecolog" )
end
function init_scryaga_known_art_dialog( dlg )
	init_known_art_dialog( dlg, "Mil_Miser" )
end
function init_sak_known_art_dialog( dlg )
	init_known_art_dialog( dlg, "Sak" )
end
function init_doctor_known_art_dialog( dlg )
	init_known_art_dialog( dlg, "Doktor" )
end

-----------------------------------------------------------------------------------------------
function attach()
	this.init()
	xr_s.subscribe("info", this.on_info)
	xr_s.subscribe("item_to_slot", this.on_slot)
	xr_s.subscribe("item_take", this.hit_by_art)
	xr_s.subscribe("first_update", this.first_update)
end
