-- -*- mode: lua; encoding: windows-1251 -*-
-- File:        UI_LOAD_DIALOG.SCRIPT
-- Description: Load Dialog for STALKER
-- Created:     28.10.2004
-- Copyright:   2004 GSC Game World
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Version:     0.5

class "list_item" (CUIListItemEx)

function list_item:__init() super()
	self:SetWndRect		(0,0,430,22)
	
	self.fn					= CUIStatic	()
	self.fn:SetAutoDelete	(true)
	self:AttachChild		(self.fn)
	self.fn:SetWndRect		(1,1,230,20)
	self.fn:SetTextColor	(0,0,0,0)

	self.tx					= CUIStatic	()
	self.tx:SetAutoDelete	(true)
	self:AttachChild		(self.tx)
	self.tx:SetWndRect		(1,1,230,20)
	self.tx:SetFont			(GetFontLetterica18Russian())
	self.tx:SetTextColor	(255,216,186,140)

	self.fage				= CUIStatic	()
	self.fage:SetAutoDelete	(true)
	self:AttachChild		(self.fage)
	self.fage:SetWndRect	(330,1,150,20)
	self.fage:SetFont		(GetFontLetterica16Russian())
	self.fage:SetTextColor	(255,216,186,140)
end

class "load_save_dialog" (CUIScriptWnd)

function load_save_dialog:__init(can_save)
	super()

	set_input_language(1)

	self.last_index = -1
	self.can_save = can_save
	self.sort = FS.FS_sort_by_modif_down
	self.last_saves_count = game_options.LastSavesCount


	self:InitControls()
	self:InitCallBacks()
	self:FillList()

	self:delete_autosave_screen()

	self.dlg = self
end

function load_save_dialog:__finalize()
end

function load_save_dialog:FillList()
	local flist = getFS():file_list_open_ex("$game_saves$",bit_or(FS.FS_ListFiles,FS.FS_RootOnly),"*.sav")
	local f_cnt = flist:Size()

	flist:Sort(self.sort)

	local file, file_name, date_time
	for	it=0, f_cnt-1 	do
		file		=	flist:GetAt(it)
		file_name = file:NameFull():sub(1, -5)
		date_time = "[" .. file:ModifDigitOnly() .. "]"
		self:AddItemToList(file_name, date_time)
	end
end

function load_save_dialog:InitControls()
	self:Init(0,0,1024,768)

	local xml			 = CScriptXmlInit()
	local ctrl
	xml:ParseFile("ui_mm_load_save_dlg.xml")

	xml:InitStatic("background",				self)

	local form = xml:InitStatic("form",			self)

	xml:InitStatic("form:caption",				form)

	ctrl = xml:InitStatic("form:picture",		form)
	ctrl:SetWindowName("static_pict")	

	xml:InitStatic("form:file_info",			form)

	self.file_caption 	= xml:InitStatic("form:file_caption",	form)
	self.file_data		= xml:InitStatic("form:file_data",		form)

	self.edit_filename = xml:InitEditBox("form:edit",			form)

	xml:InitFrame("form:list_frame",			form)

	self.list = xml:InitList("form:list", 		form)
	self.list:ShowSelectedItem(true)
	self:Register(self.list, "list_window")

	ctrl = xml:Init3tButton("form:btn_load",	form)	
	self:Register(ctrl, "button_load")

	ctrl = xml:Init3tButton("form:btn_save",	form)	
	self:Register(ctrl, "button_save")
	if not self.can_save then
		ctrl:Enable(false)
	end

	ctrl = xml:Init3tButton("form:btn_delete",	form)	
	self:Register(ctrl, "button_del")

	ctrl = xml:Init3tButton("form:btn_delete_excess", form)	
	self:Register(ctrl, "button_del_ex")

	ctrl = xml:Init3tButton("form:btn_rename",	form)	
	self:Register(ctrl, "button_ren")

	ctrl = xml:Init3tButton("form:btn_cancel",	form)
	self:Register(ctrl, "button_cancel")	

	self.tab_sort = xml:InitTab("form:tab_sort", form)
	self:Register(self.tab_sort, "tab_sort")

	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box, "message_box")
	self.message_box.check = xml:InitCheck("msgbox_check", self.message_box)

	self.msgbox_id	= 0
end

function load_save_dialog:InitCallBacks()
	self:AddCallbackEx("button_load",		ui_events.BUTTON_CLICKED,			self.OnButton_load_clicked)
	if self.can_save then
		self:AddCallbackEx("button_save",	ui_events.BUTTON_CLICKED,			self.OnButton_save_clicked)
	end
	self:AddCallbackEx("button_cancel",		ui_events.BUTTON_CLICKED,			self.OnButton_cancel_clicked)
	self:AddCallbackEx("button_del",		ui_events.BUTTON_CLICKED,			self.OnButton_del_clicked)
	self:AddCallbackEx("button_del_ex",		ui_events.BUTTON_CLICKED,			self.OnButton_del_ex_clicked)
	self:AddCallbackEx("button_ren",		ui_events.BUTTON_CLICKED,			self.OnButton_ren_clicked)
	self:AddCallbackEx("message_box",		ui_events.MESSAGE_BOX_YES_CLICKED,	self.OnMsgYes)
	self:AddCallbackEx("message_box",		ui_events.MESSAGE_BOX_OK_CLICKED,	self.OnMsgYes)
	self:AddCallbackEx("tab_sort",			ui_events.TAB_CHANGED,				self.OnTabChange)

	self:AddCallbackEx("list_window",		ui_events.LIST_ITEM_CLICKED,		self.OnListItemClicked)
	self:AddCallbackEx("list_window",		ui_events.WINDOW_LBUTTON_DB_CLICK,	self.OnListItemDbClicked)
end

function load_save_dialog:OnTabChange()
	local idx = self.tab_sort:GetActiveIndex()
	local mode = (idx == 0) and FS.FS_sort_by_modif_down or FS.FS_sort_by_name_up
	if mode == self.sort then return end

	self.sort = mode

	if self.list:GetSize() > 0 then
		self.list:RemoveAll()
		self.list:ScrollToBegin()
		self.list:SetSelectedItem(-1)
		self.last_index = -1
		self.edit_filename:SetText("")
	end

	self:FillList()
end

-- удаление скрина автосейва - он глючный
function load_save_dialog:delete_autosave_screen()
	local file = old_user_name().."_autosave.dds"
	local fs = getFS()
	if fs:exist("$game_saves$", file) then
		fs:file_delete("$game_saves$", file)
	end
end

function load_save_dialog:OnButton_del_ex_clicked()
	if self.list:GetSize() <= self.last_saves_count then return end

	self.msgbox_id = 5
	local text = string.gsub( game.translate_string("st_mm_delete_excess_files"), "%$cnt", tostring(self.last_saves_count) )
	self.message_box:Init("message_box_delete_file_name")
	self.message_box:SetText(text)
	self.message_box.check:Show(true)
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function load_save_dialog:OnButton_ren_clicked()
	if self.list:GetSize()==0 then return end

	local index = self.list:GetSelectedItem()
	if index == -1 then return end

	local item = self.list:GetItem(index)
	if item == nil then return end

	local text = self.edit_filename:GetText()
	if text == "" or item.fn:GetText() == text then return end

	self.msgbox_id = 4
	self.message_box:Init("message_box_confirm_load_save")
	self.message_box:SetText("st_mm_file_rename")
	self.message_box.check:Show(false)
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function load_save_dialog:OnListItemClicked()
--	if self.list:GetSize()==0 then return end
	
	local itm_index		= self.list:GetSelectedItem()
	if self.last_index == itm_index then return end
	self.last_index = itm_index
	
	local item			= self.list:GetItem(itm_index)
	
	local picture		= self:GetStatic("static_pict")	

	if item == nil then
		self.file_caption:SetText	("")
		self.file_data:SetText		("no file data")
		picture:InitTexture			("ui\\ui_noise")
		return
	end
	
	local item_text				= item.fn:GetText()

	if file_exist(item_text .. ".sav") ~= true then
		self.list:RemoveItem(itm_index)
		self.last_index = -1
		return
	end

	local cap_text = item_text
    if #cap_text > 30 then
        cap_text = cap_text:sub(1,29).."..."
    end
	self.file_caption:SetText	(cap_text)
	self.file_data:SetText		(file_data(item_text))

	if file_exist(item_text .. ".dds") then
		picture:InitTexture(item_text)
	else
		picture:InitTexture("ui\\ui_noise")
	end

	self.edit_filename:SetText(item_text)
end

function load_save_dialog:OnListItemDbClicked()
	self:OnButton_load_clicked()
end

function load_save_dialog:OnMsgYes()
	if self.msgbox_id == 5 then
		self:DeleteExcessFiles()
		self.msgbox_id = 0
		return
	end

	local index = self.list:GetSelectedItem()
	
	if index == -1 then self.msgbox_id = 0 return end
	local item  = self.list:GetItem(index)
	if item == nil then self.msgbox_id = 0 return end

	local fname = item.fn:GetText()

	if self.msgbox_id == 1 then
		delete_save_game(fname)
		self.list:RemoveItem(index)
		self.last_index = -1
		self:OnListItemClicked()
	elseif self.msgbox_id == 2 then
		self:SaveFile(self.new_save)
		self:OnButton_cancel_clicked()
	elseif self.msgbox_id == 3 then
		self:load_game_internal(fname)
	elseif self.msgbox_id == 4 then
		self:RenameSelectedFile()
	end
	
	self.msgbox_id = 0
end

function load_save_dialog:DeleteExcessFiles()
	local fs = getFS()
	local flist = fs:file_list_open_ex("$game_saves$",bit_or(FS.FS_ListFiles,FS.FS_RootOnly),"*.sav")

	local f_cnt = flist:Size()
	if f_cnt <= self.last_saves_count then return end

	flist:Sort(FS.FS_sort_by_modif_down)

	local shift_auto = self.message_box.check:GetCheck()

	local file_name
	local tmp = {}
	for it = 0, f_cnt-1 do
		file_name = flist:GetAt(it):NameFull()
		if shift_auto then
			if (string.find(file_name, "^День%s%d+%.%s%d%d%-%d%d")) ~= nil then
				table.insert(tmp, file_name)
			end
		else
			table.insert(tmp, file_name)
		end
	end

	if #tmp <= self.last_saves_count then return end

	local dds_name
	for i = self.last_saves_count+1, #tmp do
		file_name = tmp[i]
		dds_name = file_name:sub(1, -4).."dds"
		if fs:exist("$game_saves$", file_name) then
			fs:file_delete("$game_saves$",file_name)
		end
		if fs:exist("$game_saves$", dds_name) then
			fs:file_delete("$game_saves$",dds_name)
		end
	end

	self.list:RemoveAll()
	self:FillList()
	self.list:ScrollToBegin()
	self.list:SetSelectedItem(-1)
	self.edit_filename:SetText("")
	self.last_index = -1
end

function load_save_dialog:RenameSelectedFile()
	local index		= self.list:GetSelectedItem()
	local item		= self.list:GetItem(index)
	local fname		= item.fn:GetText()
	local new_fname	= self.edit_filename:GetText()

	local fs = getFS()
	local f1 = fs:update_path("$game_saves$", fname..".sav")
	local f2 = fs:update_path("$game_saves$", new_fname..".sav")
	fs:file_rename(f1, f2, true)
	if fs:exist("$game_saves$", fname..".dds") then
		f1 = fs:update_path("$game_saves$", fname..".dds")
		f2 = fs:update_path("$game_saves$", new_fname..".dds")
		fs:file_rename(f1, f2, true)
	end

	item.fn:SetText(new_fname)

	if #new_fname>50 then
		new_fname = new_fname:sub(1,48)..'...'
	end
	item.tx:SetText(new_fname)

    if #new_fname>30 then
        new_fname = new_fname:sub(1,29).."..."
    end
	self.file_caption:SetText(new_fname)
end

function load_save_dialog:load_game_internal(fname)	
	local console = get_console()
	
	ui_mm_opt_add.check_options()
	
	_G.destroy_level = true
	if (alife() == nil) then
		console:execute	("disconnect")	
		console:execute	("start server(" .. fname .. "/single/alife/load) client(localhost)")	
	else
		console:execute	("load " .. fname)
	end
end

function load_save_dialog:OnButton_load_clicked()
	if self.list:GetSize()==0 then return end

	local index = self.list:GetSelectedItem()
	if (not index) or index == -1 then return end

	local item		= self.list:GetItem(index)
	if item == nil then return end
	local fname		= item.fn:GetText()

	if valid_saved_game(fname) then
		if alife() == nil or Actor == nil or not Actor:alive() then
			self:load_game_internal(fname)
		else
			self.msgbox_id = 3
			self.message_box:Init("message_box_confirm_load_save")
			self.message_box.check:Show(false)
			self:GetHolder():start_stop_menu(self.message_box, true)
		end
	else
		self.msgbox_id = 0
		self.message_box:Init("message_box_invalid_saved_game")
		self.message_box.check:Show(false)
		self:GetHolder():start_stop_menu(self.message_box, true)
	end
end

function load_save_dialog:OnButton_save_clicked()
	-- Get file name
	self.new_save		= self.edit_filename:GetText()
	self.new_save		= self.new_save:clear():trim()
	
	--// check for empty name
	if string.len(self.new_save) == 0 then
		self.msgbox_id = 0
		self.message_box:Init("message_box_empty_file_name")
		self.message_box.check:Show(false)
		self:GetHolder():start_stop_menu(self.message_box, true)
		return
	end
	
	--// check for match name
	if file_exist(self.new_save..".sav") then
		self.msgbox_id = 2
		self.message_box:Init("message_box_file_already_exist")
		self.message_box.check:Show(false)
		self:GetHolder():start_stop_menu(self.message_box, true)
		return
	end

	self:SaveFile(self.new_save)
	self:OnButton_cancel_clicked()
end

function load_save_dialog:SaveFile(fileName)
	if fileName then
		get_console():execute("save " .. fileName)
	end
end

function load_save_dialog:OnButton_cancel_clicked()
	self:ClearCallbacks()
	self:GetHolder():start_stop_menu	(self.owner, true) --new(show main window)
	self:GetHolder():start_stop_menu	(self,true)
	self.owner:Show						(true)
	self.dlg = nil
end

function load_save_dialog:OnButton_del_clicked()
	if self.list:GetSize() == 0 then return end
	local index = self.list:GetSelectedItem()
	
	if index == -1 then return end
	if self.list:GetItem(index) == nil then return end
	self.msgbox_id = 1
	
	self.message_box:Init("message_box_delete_file_name")
	self.message_box.check:Show(false)
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function load_save_dialog:AddItemToList(file_name, date_time)
	local _itm = list_item()
	_itm.fn:SetText(file_name)
	if #file_name>50 then file_name = file_name:sub(1,48)..'...' end
	_itm.tx:SetText(file_name)
	_itm.fage:SetText(date_time)
	self.list:AddItem(_itm)
end

function load_save_dialog:OnKeyboard(dik, keyboard_action)  --virtual function
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)

	check_input_language(self,dik,keyboard_action)

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then
			self:OnButton_cancel_clicked()
		elseif dik == DIK_keys.DIK_RETURN then
			self:OnButton_load_clicked()
		elseif dik == DIK_keys.DIK_DELETE then
			self:OnButton_del_clicked()
		elseif dik == DIK_keys.DIK_INSERT then
			if self.can_save then
				self:OnButton_save_clicked()
			end
		end
	end
	return true
end



function file_data(fname)
	local ex = getFS():exist("$game_saves$", fname..".sav")
	if ex ~= nil then
		local sg = CSavedGameWrapper(fname)
		
		local y,m,d,h,min,sec,ms = 0,0,0,0,0,0,0
		y,m,d,h,min,sec,ms = sg:game_time():get(y,m,d,h,min,sec,ms)
		
		local date_time = string.format( "%02d.%02d.%04d %02d:%02d", d, m, y, h, min )
		local health = string.format( "%d%%", sg:actor_health()*100 )
		local save_time = os.date( "%d.%m.%Y %H:%M", ex.modif )
		
		return "Уровень: " .. game.translate_string( sg:level_name() ) ..
			"\\nИгровое время: " .. date_time .. 
			"\\nЗдоровье: " .. health ..
			"\\nСохранено: " .. save_time
	else
		return "no file data"
	end	
end

function file_exist(fname)
	return getFS():exist("$game_saves$", fname) ~= nil
end

function delete_save_game(filename)
	local save_file		= filename .. ".sav"
	local dds_file		= filename .. ".dds"
	local fs = getFS()

	fs:file_delete("$game_saves$",save_file)

	if fs:exist("$game_saves$", dds_file) then
		fs:file_delete("$game_saves$", dds_file)
	end
end

