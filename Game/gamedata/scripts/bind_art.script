-- -*- mode: lua; encoding: windows-1251 -*-

class "art_binder" ( object_binder )


function art_binder:__init( item ) super( item )
	self.netspawn = true
	self.need_update_art_loss = true
end

function art_binder:update( delta )
	object_binder.update( self, delta )

	if self.netspawn then
		local item = self.object
		local ps = item:get_physics_shell()
		if ps and not item:parent() then
			local impulse = item:mass() * 1300
			ps:apply_force( 0, impulse, 0 )
		end
		self.netspawn = nil
	end

	if self.need_update_art_loss then
		local se_obj = AI:object( self.object:id() )
		if se_obj then
			self:set_art_loss(se_obj.art_loss)
		end
	end
end

function art_binder:net_spawn( obj )
	if not object_binder.net_spawn( self, obj ) then return false end

	bind_det_arts.add_artefact( self.object:id(), self.object:section() )

	local se_obj = AI:object( self.object:id() )
	if se_obj then
		self:set_art_loss(se_obj.art_loss)
	end

	return true 
end

function art_binder:net_destroy()
	if AI:object( self.object:id() ) == nil then
		bind_det_arts.del_artefact( self.object:id() )
	end

	object_binder.net_destroy(self)
end

function art_binder:set_art_loss(loss)
--	log("[art_binder:set_art_loss] %s :: %s", self.object:section(), tostring(loss))
	self.need_update_art_loss = nil
	if (not loss) or loss == 0 then return end

	local cond = 1 - loss
	local item = self.object

	item:set_cost( item:cost() * cond )

	local val = 0
	local sect = item:section()
	for k, v in pairs(artefact_offsets.conditions) do
		val = sys_ini:r_float(sect, k)
		item:set_inventory_item_float(nil, val*cond, v)
	end

	sect = sys_ini:r_string(sect, "hit_absorbation_sect")
	for k, v in pairs(artefact_offsets.immunities) do
		val = sys_ini:r_float(sect, k)
		if val ~= 1 then
			val = (val-1) * cond + 1
			item:set_inventory_item_float(nil, val, v)
		end
	end

	item:set_inventory_item_flags(ii_flags.ungroupable, true)
end
---------------------------------------------------------------------------------
function bind( item )
	item:bind_object( art_binder( item ) )
end 
