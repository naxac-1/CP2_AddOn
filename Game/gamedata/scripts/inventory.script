-- -*- mode: lua; encoding: windows-1251 -*-

local belt = {}
local belt_id = {}

-- callbacks
function on_item_take(item)
	this.inventory_update(item, 1)
end

function on_item_drop(item)
	this.inventory_update(item, -1)
	this.remove_from_belt(item)
	this.check_current_outfit(item, false)
end

function on_item_to_belt(item)
	this.add_on_belt(item)
end

function on_item_to_slot(item)
	this.remove_from_belt(item)
	this.check_current_outfit(item, true)
end

function on_item_to_ruck(item)
	this.remove_from_belt(item)
	this.check_current_outfit(item, false)
end

-------------------------------------------------------------------------------------------------
-- belt
local wthr = nil

function remove_from_belt( item )
	local id = item:id()
	local t = belt_id[ id ]
	if t == nil then return end

	local sect =  item:section()
	table.sub( belt, sect )
	
	if sect == "bioradar" or sect == "bioradar2" then
		if belt["bioradar"] == nil and belt["bioradar2"] == nil then
			biodetector.switch_bioradar( false )
		end
	end

	if t.satiety then
		arc_radiation.change_arts_satiety( -t.satiety )
	end

	if t.radiation then
		arc_radiation.change_inv_radiation( t.radiation )
	end

	if t.add_weight then
		xr_actor.change_actor_weight( -t.add_weight )
	end

	belt_id[ id ] = nil
end

function add_on_belt( item )
	local id = item:id()
	if belt_id[ id ]~=nil then return end

	if this.check_belt_slots(item) then
		return
	end

	local t = {}
	belt_id[ id ] = t

	local sect = item:section()
	table.add( belt, sect )
	t.section = sect

	if sect == "af_idol_monolita" then
		if amk.load_variable( "blowout", 0 ) == 0 then
			level.set_weather( "grey", true )
		end
	elseif sect == "bioradar" or sect == "bioradar2" then
		biodetector.switch_bioradar( true )
	end

	if item:is_artefact() then
	--	local n = sys_ini:r_float( sect, "satiety_restore_speed" )
		local n = item:get_inventory_item_float( artefact_offsets.conditions.satiety_restore_speed )
		if n ~= 0 then
			t.satiety = n
			arc_radiation.change_arts_satiety( n )
		end
		
	--	n = sys_ini:r_float( sect, "radiation_restore_speed" )
		n = item:get_inventory_item_float( artefact_offsets.conditions.radiation_restore_speed )
		if n > 0 then
			t.radiation = n
			arc_radiation.change_inv_radiation( -n )
		end

		if sys_ini:line_exist( sect, "additional_inventory_weight" ) then
			n = sys_ini:r_float( sect, "additional_inventory_weight" ) * item:condition()
			t.add_weight = n
			xr_actor.change_actor_weight( n )
		end
	end
end

-- предмет на поясе, проверка по секции
function on_belt(sect)
	return belt[sect]
end

-- предмет на поясе, проверка по game_object
function item_on_belt(item)
	return belt_id[item:id()]~=nil
end


local max_belt = sys_ini:r_u32("inventory", "max_belt")

function is_free_belt_slot()
	return Actor:belt_count() < max_belt
end

function get_free_belt_slot()
	if is_free_belt_slot() then return end
	
	local item
	for i = 0, Actor:belt_count()-1 do
		item = Actor:item_on_belt(i)
		if item:is_artefact() and item:section()~="af_invul" then
			Actor:move_to_ruck(item)
			return
		end
	end
end

function check_belt_slots(item)
	if Actor:belt_count() > max_belt then
		trade_precondition.skip_treat_item = true
		Actor:move_to_ruck(item)
		return true
	end
	return false
end

function check_without_outfit()
	if Actor:get_current_outfit() == nil then
		max_belt = sys_ini:r_u32("without_outfit", "belt_slots")
		while Actor:belt_count() > max_belt do
			Actor:move_to_ruck( Actor:item_on_belt( Actor:belt_count()-1 ) )
		end
	end
end

function check_current_outfit(item, mode)
	if item:get_slot() ~= 6 then return end

	if mode then
		local sect = item:section()
		max_belt = sys_ini:r_u32(sect, "belt_slots")
		while Actor:belt_count() > max_belt do
			Actor:move_to_ruck( Actor:item_on_belt( Actor:belt_count()-1 ) )
		end
	else
		start_small_timer(200, this.check_without_outfit)
	end
end

-------------------------------------------------------------------------------
-- Кеш текущего состояния инвентаря ГГ (только предметы проверяемые функцией search, их обычно немного)
-- Структура: [секция_предмета] = { count = количество_в_инвентаре,
-- 						good_count = количество_предметов_в_хорошем_состоянии }
-------------------------------------------------------------------------------
local InventoryState = {}
local good_condition = 0.95		-- состояние предмета, при котором считается, что он полностью исправен

-- Проверка на количество предметов в инвентаре гг
function search(iItemSection, iNeededCount, bGood)
	--Взятие из кеша текущего состояния инвентаря:
	local tStat = InventoryState[iItemSection]
	--Загрузка текущего состояния инвентаря в кеш:
	if tStat == nil then
		tStat = { count = 0, good_count = 0 }
		if isAmmo( nil, sys_ini:r_clsid(iItemSection, "class") ) then
			tStat.ammo_count = 0
		end
		Actor:iterate_inventory(function (dummy, vItem)
				if vItem:section() == iItemSection then
					tStat.count = tStat.count + 1
					if vItem:condition() > good_condition then
						tStat.good_count = tStat.good_count + 1
					end
					if tStat.ammo_count then
						tStat.ammo_count = tStat.ammo_count + vItem:get_ammo_left()
					end
				end 
			end, nil)
		InventoryState[iItemSection] = tStat
	end

	--Выдача результата проверки:
	return (bGood and tStat.good_count or tStat.count) >= (iNeededCount or 1)
end

-- Заставить данные обновиться принудительно, если в отслеживаем этот предмет
function force_update(iItemSection)
	InventoryState[iItemSection] = nil
end

--Обработчик появления или исчезновения предмета в инвентаре (нужно обновить кеш):
function inventory_update(iObject, iCountDelta)
	if iObject == nil then return end
	--Взятие из кеша текущего состояния инвентаря:
	local tStat = InventoryState[iObject:section()]
	--Обновление текущего состояния инвентаря в кеше:
	if tStat ~= nil then
		tStat.count = tStat.count + iCountDelta
		if iObject:condition() > good_condition then
			tStat.good_count = tStat.good_count + iCountDelta
		end
		if iObject:is_ammo() then
			tStat.ammo_count = tStat.ammo_count + iCountDelta * iObject:get_ammo_left()
		end
	end
end

function search_af(sSection, iNeededCount)
	if not artefact_hunter.is_known_art(sSection) then
		return false
	end
	return this.search(sSection, iNeededCount)
end

function search_ammo(sSection, iNeededCount)
	local tStat = InventoryState[sSection]
	if tStat == nil then
		this.search(sSection)
		tStat = InventoryState[sSection]
	end
	return tStat.ammo_count and tStat.ammo_count >= iNeededCount
end

function get_items_count(sSection)
	local tStat = InventoryState[sSection]
	if tStat == nil then
		this.search(sSection)
		tStat = InventoryState[sSection]
	end
	return tStat.count
end
function get_ammo_count(sSection)
	local tStat = InventoryState[sSection]
	if tStat == nil then
		this.search(sSection)
		tStat = InventoryState[sSection]
	end
	return tStat.ammo_count or 0
end

function give_items(sSection, iNeedCount)
	if iNeedCount == nil then
		iNeedCount = 1
	end

	if ammo_sections[sSection] then
		this.give_ammo(sSection, iNeedCount*ammo_sections[sSection])
		return
	end

	local actor_id = Actor:id()
	for i = 1, iNeedCount do
		AI:create(sSection, vector():set(0,0,0), 0, 0, actor_id)
	end

	news_manager.relocate_item("in", sSection, iNeedCount)
end

function give_ammo(sSection, iNeedCount)
	local iOutCount = iNeedCount
	local box_size = ammo_sections[sSection]
		or sys_ini:r_u32(sSection, "box_size")

	local actor_id = Actor:id()
	while iOutCount > box_size do
		AI:create_ammo(sSection, vector():set(0,0,0), 0, 0, actor_id, box_size)
		iOutCount = iOutCount - box_size
	end
	AI:create_ammo(sSection, vector():set(0,0,0), 0, 0, actor_id, iOutCount)

	news_manager.relocate_item("in", sSection, iNeedCount)
end

function give_ammo_to_weapons(iCount, rnd)
	for n, slot in ipairs( {inventory_slots.PISTOL, inventory_slots.RIFLE} ) do
		local wpn = Actor:item_in_slot(slot)
		if wpn and isMagazinedWeapon(wpn) then
			local s = sys_ini:r_string(wpn:section(), "ammo_class")
			local t = string.explode(s, ",", true)
			for i, v in ipairs(t) do
				give_ammo( v, iCount + math.random(-rnd, rnd) )
			end
		end
	end
end

function out_items(sSection, iNeedCount, bGood)
	if iNeedCount == nil then
		iNeedCount = 1
	end

	if ammo_sections[sSection] then
		this.out_ammo(sSection, iNeedCount*ammo_sections[sSection])
		return
	end

	local iOutCount = 0
	local seObj = nil
	Actor:iterate_inventory(function (dummy, vItem)
		if iOutCount >= iNeedCount then
			return
		end

		if vItem:section() == sSection
			and (bGood ~= true or vItem:condition() > good_condition)
		then
			seObj = AI:object( vItem:id() )
			if seObj then
				AI:release(seObj, true)
			end
			iOutCount = iOutCount + 1
		end
	end,
	Actor)

	if iOutCount > 0 then
		news_manager.relocate_item("out", sSection, iOutCount)
	end
end

function out_items_all(sSection, bGood)
	local iOutCount = 0
	local seObj = nil
	Actor:iterate_inventory(function (dummy, vItem)
		if vItem:section() == sSection
			and (bGood ~= true or vItem:condition() > good_condition)
		then
			seObj = AI:object( vItem:id() )
			if seObj then
				AI:release(seObj, true)
			end
			iOutCount = iOutCount + 1
		end
	end,
	Actor)

	if iOutCount > 0 then
		news_manager.relocate_item("out", sSection, iOutCount)
	end
end


function out_ammo(sSection, iNeedCount, bNoMessage)
	local out_cnt = iNeedCount
	local obj
	Actor:iterate_inventory(function (actor, item)
		if out_cnt <= 0 then return end
		if item:is_ammo() and item:section() == sSection then
			out_cnt = out_cnt - item:get_ammo_left()
			obj = AI:object(item:id())
			if obj then
				AI:release(obj, true)
			end
		end
	end,
	Actor)

	if out_cnt < 0 then
		AI:create_ammo(sSection, Actor:position(), Actor:level_vertex_id(),
			Actor:game_vertex_id(), Actor:id(), -out_cnt)
		out_cnt = 0
	end

	if bNoMessage then return end
	news_manager.relocate_item("out", sSection, iNeedCount-out_cnt)
end

-- эти функции не использовать для тасков, только для диалогов!
function has_by_condition(section, need_count, min_cond, max_cond)
	if need_count == nil then need_count = 1 end
	if min_cond == nil then min_cond = 0 end
	if max_cond == nil then max_cond = 1 end

	local count = 0
	Actor:iterate_inventory(
		function(dummy, item)
			if count == need_count then return end
			if item:section() ~= section then return end
			local cond = item:condition()
			if cond >= min_cond and cond <= max_cond then
				count = count + 1
			end
		end,
		Actor
	)
	return count == need_count
end
function out_by_condition(section, need_count, min_cond, max_cond)
	if need_count == nil then need_count = 1 end
	if min_cond == nil then min_cond = 0 end
	if max_cond == nil then max_cond = 1 end

	local count = 0
	Actor:iterate_inventory(
		function(dummy, item)
			if count == need_count then return end
			if item:section() ~= section then return end
			local cond = item:condition()
			if cond >= min_cond and cond <= max_cond then
				local obj = AI:object(item:id())
				if obj then AI:release(obj, true) end
				count = count + 1
			end
		end,
		Actor
	)

	news_manager.relocate_item("out", section, need_count)
end

function create_cond_item_to_actor( section, condition )
	local sobj = AI:create( section, vector():set(0,0,0), 0, 0, Actor:id() )
	netpk:modify(sobj, {condition = condition}, netpk.fState)
	level.client_spawn_manager():add( sobj.id, 0, 
		function (cond, id, obj)
			obj:set_condition(cond)
		end,
	condition )
	return sobj
end

