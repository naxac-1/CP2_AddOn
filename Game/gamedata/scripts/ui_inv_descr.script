-- -*- mode: lua; encoding: windows-1251 -*-
local get_string = game.translate_string
local level_object = level.object_by_id
local string_format = string.format
local string_gfind = string.gfind
local string_find = string.find
local table_insert = table.insert

local ShowSectionName = game_options.DEBUG

local cell_size = 25		-- размер иконки в описании свойств предмета
local vert_interval = 1		-- параметр vert_interval в скролле

local shift_show_descr = 700  -- через какое время после наведения курсора будет показано окно, ms


-- съедобное
local is_eatable = {
	[clsid.obj_antirad]	= true,
	[clsid.obj_bandage]	= true,
	[clsid.obj_bottle]	= true,
	[clsid.obj_food]	= true,
	[clsid.obj_medkit]	= true
}

-- Параметры актёра, по которым считаются некоторые параметры артефактов
local actor_conditions = {
	bleeding_restore_speed	= sys_ini:r_float('actor_condition', 'wound_incarnation_v') /100,
	health_restore_speed	= sys_ini:r_float('actor_condition', 'satiety_health_v') /100,
	power_restore_speed		= sys_ini:r_float('actor_condition', 'satiety_power_v'),
	satiety_restore_speed	= sys_ini:r_float('actor_condition', 'satiety_v') /100,
	radiation_restore_speed	= sys_ini:r_float('actor_condition', 'radiation_v')
}
-- параметры артов
local conditions_params = {
	{ prop = "health_restore_speed",	text = "Здоровье:",		tex = "health"		},
	{ prop = "bleeding_restore_speed",	text = "Кровотечение:",	tex = "bleeding"	},
	{ prop = "satiety_restore_speed",	text = "Сытость:",		tex = "satiety"		},
	{ prop = "power_restore_speed",		text = "Выносливость:",	tex = "power"		},
	{ prop = "radiation_restore_speed",	text = "Радиация:",		tex = "radiation_2", unit = "Ки"	},
}
-- Типы хитов и соответствующие им текстуры и названия
local hit_types = {
	{ prop = "burn",			text = "Ожог:"			},
	{ prop = "shock",			text = "Электрошок:"	},
	{ prop = "strike",			text = "Удар:"			},
	{ prop = "wound",			text = "Разрыв:"		},
	{ prop = "radiation",		text = "Радиация:"		},
	{ prop = "telepatic",		text = "Телепатия:"		},
	{ prop = "chemical_burn",	text = "Хим. ожог:"		},
	{ prop = "explosion",		text = "Взрыв:"			},
	{ prop = "fire_wound",		text = "Пулестойкость:"	}
}
-- Параметры еды
local eatable_params = {
	{ prop = "eat_health",        text = "Здоровье:",     tex = "health"                              },
	{ prop = "wounds_heal_perc",  text = "Кровотечение:", tex = "bleeding"                            },
	{ prop = "eat_psy_health",    text = "Пси-здоровье:", tex = "telepatic"                           },
	{ prop = "eat_satiety",       text = "Сытость:",      tex = "satiety"                             },
	{ prop = "eat_thirst",        text = "Жажда:",        tex = "thirst",      dec = true             },
	{ prop = "eat_power",         text = "Выносливость:", tex = "power"                               },
	{ prop = "eat_alcohol",       text = "Опьянение:",    tex = "alcohol",     dec = true             },
	{ prop = "eat_radiation",     text = "Радиация:",     tex = "radiation_2", dec = true, unit = "Р" }
}
--------------------------------------------------------------------------------------------------------
class "CUIDescriptionWnd" (CUIScriptWnd)

local reg_callbacks = {
	cell_item_focus = "OnItemFocus",
	cell_item_focus_lost = "OnItemFocusLost",
	key_press = "OnKeyPress",
	mouse_wheel = "OnMouseWheel",
	update = "OnUpdate"
}

function CUIDescriptionWnd:__init(owner, autosubscribe) super()
	self.owner = owner

	self.scrollPos = 0
	self.k_icon = cell_size*kScreen/50

	self:Init(0, 0, 1024, 768)
	self:SetAutoDelete(true)
	
	self.xml = CScriptXmlInit()
	self.xml:ParseFile("ui_inv_descr.xml")
	
	self.frame = self.xml:InitFrame("description", owner)
	
	self.inv_name = self.xml:InitStatic("description:inv_name", self.frame)
	
	self.scroll_v = self.xml:InitScrollView("description:scroll_v", self.frame)
	self.scroll_height = self.scroll_v:GetHeight()
	self.descr = self.xml:InitStatic("description:descr_list", nil)
	
	self.cost = self.xml:InitStatic("description:cost_wnd", self.frame)
	self.weight_static = self.xml:InitStatic("description:weight_wnd", self.frame)
	
	self.cond_frame = self.xml:InitStatic("description:frame_condition", self.frame)
	self.cond_scale = self.xml:InitProgressBar("description:condition_progress", self.cond_frame)
	
	self.frame:Show(false)

	if autosubscribe then
		self:subscribe()
		self.autounsubscribe = true
	end
end

function CUIDescriptionWnd:__finalize()
end

function CUIDescriptionWnd:subscribe()
	self.itemInFocus = -1
	for k,v in pairs(reg_callbacks) do
		xr_s.subscribe( k, self[v], { self = self } )
	end
end
function CUIDescriptionWnd:unsubscribe()
	for k,v in pairs(reg_callbacks) do
		xr_s.unsubscribe(k, self[v])
	end
	self.itemInFocus = -1
	self.shift_tmr = nil
	self.frame:Show(false)
end

function CUIDescriptionWnd:HideDescription()
	if self.frame:IsShown() then self.frame:Show(false) end
end

function CUIDescriptionWnd:OnMouseWheel(mode)
	if not self.frame:IsShown() then return end
	if self.frame:GetHeight() < 768 then return end

	local n = mode and -40 or 40 
	local mx = self.scroll_v:GetMaxScrollPos()
	if mx > self.scroll_height then mx = mx - self.scroll_height end
	self.scrollPos = math.clamp(self.scrollPos + n, 0, mx)
	self.scroll_v:SetScrollPos(self.scrollPos)
end

function CUIDescriptionWnd:ShowProps(tbl)
	local st
	for i, t in ipairs(tbl) do
		st = self.xml:InitStatic("props", self.scroll_v)
		st.icon = self.xml:InitStatic("props:prop_texture", st)
		st.icon:InitTexture("ui_inv_icon_"..t[1])
		st.text = self.xml:InitStatic("props:prop_text", st)
		st.text:SetText(t[2])
		self.addH = self.addH + st:GetHeight() + vert_interval
	end
end

function CUIDescriptionWnd:ShowPropFromIni(icon, text, text_color)
	local st = self.xml:InitStatic("props_ini", self.scroll_v)
	st:SetHeight(cell_size)

	local w = icon.w*self.k_icon
	local ww = cell_size*2
	st.icon = CUIStatic()
	st:AttachChild(st.icon)
	st.icon:InitTexture("ui\\ui_icon_equipment")
	st.icon:SetOriginalRect(icon.x, icon.y, icon.w, icon.h)
	st.icon:Init((ww-w)/2, 0, w, cell_size)
	st.icon:SetStretchTexture(true)

	ww = ww + 1
	st.text = CUIStatic()
	st:AttachChild(st.text)
	st.text:Init(ww, 0, st:GetWidth()-ww, cell_size)
	st.text:SetTextY((cell_size/2)-8)
	st.text:SetTextST(text)
	if text_color then
		st.text:SetTextColor( unpack(text_color) )
	else
		st.text:SetTextColor(255, 160, 160 ,160)
	end

	self.addH = self.addH + cell_size + vert_interval
end

function CUIDescriptionWnd:ShowDescription(item)
	if (item==nil) or BlockUIDescr() then return end

	local owner = level.main_input_receiver()
	if owner == nil then return end

	self.scroll_v:Clear()
	
	self.item = item
	self.section = item:section()
	self.condition = item:condition()

	on_read_descr(self.section)

	local inv_name = get_inv_name(self.section)

	self.addH = 0

	local description = get_string(sys_ini:r_string_wq(self.section, "description"))

	local charge = item:get_charge_level()
	if charge then
		self:ShowEnergyConsumingItemParams(charge)
	end

	-- artefacts
	if item:is_artefact() then
		if artefact_hunter.is_known_art(self.section) then
			self:ShowAfParams()
		else
			inv_name = "unknown_art"
			description = "Неизвестное аномальное образование."
			if arc_inventory.IsRadDetected() then
				local rd = item:get_inventory_item_float( artefact_offsets.conditions.radiation_restore_speed ) / actor_conditions.radiation_restore_speed
				if rd > 0 then
					description = description.." Радиоактивно, при замере показывает излучение "..string_format("%d", rd).." Кюри."
				end
			end
		end
	-- artefact containers
	elseif string_find(self.section, "^arc_art_box_") then
		self:GetContainerParams()
		if #self.arts_list > 0 then
			description = description.."\\n \\n%c[UI_orange]Содержимое:"
		else
			self.arts_list = nil
			description = description.."\\n \\n%c[UI_orange]Контейнер пуст"
		end
	elseif sys_ini:line_exist(self.section, "radiation_restore_speed") then
		local r = sys_ini:r_float(self.section, "radiation_restore_speed")
		if r > 0 then
			r = r / actor_conditions.radiation_restore_speed
			local p = { { "radiation_2", "Радиация: %c[red]+"..string_format("%dКи", r) } }
			self:ShowProps(p)
		end
	end

	if sys_ini:line_exist(self.section, "power_capacity") then
		local p = sys_ini:r_float(self.section, "power_capacity")
		self:ShowProps( {
			{ "shock", "Энергоёмкость: %c[green]"..string_format("%dАч", p) }
		} )
	end

	if ShowSectionName then
		inv_name = get_string(inv_name).."\\n%c[160,160,160,160]("..self.section..")"
	end
	self.inv_name:SetTextST(inv_name)

	self.descr:SetText(description)
	self.descr:AdjustHeightToText()
	self.scroll_v:AddWindow(self.descr, true)
	self.descr:SetAutoDelete(false)
	self.scroll_v:ScrollToBegin()
	self.scrollPos = 0

	-- container
	if self.arts_list then
		for i, v in ipairs(self.arts_list) do
			self:ShowPropFromIni( unpack(v) )
		end
		self.arts_list = nil
	-- food
	elseif isEatable(item)then
		self:ShowEatableParams()
	-- weapon
	elseif isMagazinedWeapon(item) then
		if sys_ini:r_bool_ex(self.section, "show_props", true) then
			self:ShowWeaponParams()
		end
	-- outfits
	elseif item:is_outfit() then
		self:ShowOutfitParams()
	-- knife
	elseif item:is_knife() then
		local d = sys_ini:r_float(self.section, 'fire_distance')
		self:ShowProps( { {"fire_distance_knife", "дистанция удара: "..string_format("%.2f м.", d)} } )
	-- scope
	elseif item:is_scope() then
		local zf = sys_ini:r_float(self.section, 'scope_zoom_factor')
		local zoom = device().fov/(zf*0.75)
		self:ShowProps( { {"scope", "x"..string_format("%.1f", zoom)} } )
	-- grenade
	elseif item:is_grenade() then
		local fr = sys_ini:r_float(self.section, 'frags_r')
		local br =  sys_ini:r_float(self.section, 'blast_r')
		self:ShowProps( { {"explosion", string_format("опасный радиус: %.1f м.", (fr+br)/2)} } )
	elseif sys_ini:line_exist(self.section, "fake_grenade_name") then
		local missile_sect = sys_ini:r_string(self.section, "fake_grenade_name")
		if missile_sect ~= "wpn_fake_drob" then
			local fr = sys_ini:r_float(missile_sect, 'frags_r')
			local br =  sys_ini:r_float(missile_sect, 'blast_r')
			self:ShowProps( { {"explosion", string_format("опасный радиус: %.1f м.", (fr+br)/2)} } )
		end
	end

	if inv_name == "unknown_art"
		or sys_ini:r_bool_ex(self.section, "quest_item", false)
	then
		self.cost:SetText("")
	else
		self.cost:SetText( string_format( "Цена: %d руб.", item:cost() ) )
	end
	self.weight_static:SetText( string_format("Вес: %.2f кг.", item:get_weight()) )

	if need_show_condition(item) then
		self.cond_frame:Show(true)
		self.cond_frame:SetText(
			string_format("%s: %.1f%%", get_string("ui_st_condition"), self.condition*100)
		)
		self.cond_scale:SetProgressPos(self.condition * 100)
	else
		self.cond_frame:Show(false)
	end

	local hh = self.descr:GetHeight() + self.addH
	if hh < 678 then
		self.frame:SetHeight(hh + 90)
		self.scroll_work = nil
	else
		self.frame:SetHeight(768)
		self.scroll_work = true
	end

	local cr = owner:GetCursorX()
	if cr>=512 then cr = cr - self.frame:GetWidth()
	else cr = cr + 40 end

	self.frame:SetWndPos(cr, math.min(owner:GetCursorY(), 768-self.frame:GetHeight()))

	self.frame:Show(true)
end

-- Показываем параметры съедобных предметов
function CUIDescriptionWnd:ShowEatableParams()
	local params = {}
	local val, txt = 0, ""
	for i, t in ipairs(eatable_params) do
		val = sys_ini:r_float_ex(self.section, t.prop, 0)
		if val~=0 then
			txt = t.text.." "
			if t.prop == "wounds_heal_perc" then
				txt = txt..(val>0 and "%c[green]" or "%c[red]+")
				val = -val
			elseif t.dec then
				txt = txt..(val>0 and "%c[red]+" or "%c[green]")
				if t.prop == "eat_radiation" then val = val/100 end
			else
				txt = txt..(val>0 and "%c[green]+" or "%c[red]")
			end
			txt = txt..string_format("%d",val*100)..(t.unit or "%")
			table_insert( params, {t.tex, txt} )
		end
	end

	if #params>0 then
		self:ShowProps(params)
	end
end
-- Показываем список артефактов из конейнера и неэкранированную радиацию
function CUIDescriptionWnd:GetContainerParams()
	local arts
	if self.item.is_fake then
		arts = self.item:get_container_arts()
	else
		arts = arc_containers.get_container_arts(self.item:id())
	end

	self.arts_list = {}

	local p = sys_ini:r_float_ex(self.section, "rad_protection", nil)
	if arts then
		local t = {}
		local r = 0
		for i, v in ipairs(arts) do
			if v.s ~= "_" then
				table.add(t, v.s)
				r = r + math.max(sys_ini:r_float(v.s, "radiation_restore_speed") * ( 1 - (v.ar or 0) ) - p, 0)
			end
		end

		if table.size(t) > 0 then
			local art_name
			for k,v in pairs(t) do
				if artefact_hunter.is_known_art(k) then
					art_name = get_inv_name(k)
				else
					art_name = "unknown_art"
				end
				table_insert(self.arts_list, {
					GetIconParams(k),
					get_string(art_name)..(v>1 and " x"..v or "")
				})
			end
			if r > 0 then
				if arc_inventory.IsRadDetected() then
					r = r/actor_conditions.radiation_restore_speed
					self:ShowProps( { {"radiation_2", "Радиация: %c[red]+"..string_format("%dКи",r)} } )
				end
			end
		end
	end

	p = p/actor_conditions.radiation_restore_speed
	self:ShowProps( {
		{ "radiation", "Уровень защиты: %c[green]"..string_format("%dКи", p) }
	} )
	p = sys_ini:r_u32(self.section, "container_slots")
	self:ShowProps( {
		{ "container", "Количество ячеек: %c[green]"..string_format("%d", p) }
	} )
end
-- Показываем описание оружия
function CUIDescriptionWnd:ShowWeaponParams()
	local st = self.xml:InitStatic("props", self.scroll_v)
	local stH = st:GetHeight() + vert_interval
	self.addH = self.addH + stH

	-- Боеприпасы
	st = self.xml:InitStatic("props", self.scroll_v)
	st:SetText("Боеприпасы:")
	st:SetTextColor(255, 238, 153, 26)
	self.addH = self.addH + stH
	-- Патроны
	local ammo_class = sys_ini:r_string(self.section, 'ammo_class')
	local ammo_type = self.item:get_ammo_type()
	local i = 0
	local clr = nil
	for a in string_gfind(ammo_class, "[%w_%-%.]+") do
		if i == ammo_type then
			clr = {255, 160, 255, 160}
		else
			clr = nil
		end
		self:ShowPropFromIni( GetIconParams(a), get_inv_name(a), clr )
		i = i + 1
	end
	-- Гранаты
	local s = ""
	local gl = sys_ini:r_u32(self.section, 'grenade_launcher_status')
	if gl~=0 then
		s = sys_ini:r_string_ex(self.section, 'grenade_class')
		if s and s~="ammo_vog-27" then	-- не коллиматор
			for a in string_gfind(s, "[%w_%-%.]+") do
				self:ShowPropFromIni( GetIconParams(a), get_inv_name(a) )
			end
		end
	end

	-- Навесы
	local st2
	local text = ""
	local addon, v
	-- Прицел
	local n = sys_ini:r_u32(self.section, 'scope_status')
	local af = self.item:get_addon_flags()
	if n ~= 0 then
		st2 = self.xml:InitStatic("props", self.scroll_v)
		
		addon = sys_ini:r_string_ex(self.section, 'scope_name', "wpn_addon_scope")
		v = GetIconParams(addon)
		if n == 1 then
			s = sys_ini:r_float(self.section, 'scope_zoom_factor')
			local f = device().fov/(s*0.75)
			text = "Интегрированный x"..string_format("%.1f", f).."-кратный прицел"
		else
			text = get_inv_name(addon)
		end
		if n == 1 or bit_and(af, addon_flags.scope) ~= 0 then
			clr = {255, 160, 255, 160}
		else
			clr = nil
		end
		self:ShowPropFromIni(v, text, clr)
	end

	-- Глушитель
	n = sys_ini:r_u32(self.section, 'silencer_status')
	if n ~= 0 then
		if st2 == nil then
			st2 = self.xml:InitStatic("props", self.scroll_v)
		end
		addon = sys_ini:r_string_ex(self.section, 'silencer_name', "wpn_addon_silencer")
		v = GetIconParams(addon)
		if n == 1 then
			text = "Интегрированный глушитель"
		else
			text = get_inv_name(addon)
		end
		if n == 1 or bit_and(af, addon_flags.silencer) ~= 0 then
			clr = {255, 160, 255, 160}
		else
			clr = nil
		end
		self:ShowPropFromIni(v, text, clr)
	end

	-- Подствольник
	if gl ~= 0 then
		if st2 == nil then
			st2 = self.xml:InitStatic("props", self.scroll_v)
		end
		addon = sys_ini:r_string_ex(self.section, 'grenade_launcher_name', "wpn_addon_grenade_launcher")
		v = GetIconParams(addon)
		if gl == 1 then
			text = "Интегрированный подствольный гранатомёт"
		else
			text = get_inv_name(addon)
		end
		if gl == 1 or bit_and(af, addon_flags.grenade_launcher) ~= 0 then
			clr = {255, 160, 255, 160}
		else
			clr = nil
		end
		self:ShowPropFromIni(v, text, clr)
	end
	if st2 then
		st2:SetText("Навесы:")
		st2:SetTextColor(255, 238, 153, 26)
		self.addH = self.addH + stH
	end
	self.xml:InitStatic("props", self.scroll_v)
	self.addH = self.addH + stH
	
	-- Некоторые характеристики
	v = {}
	n = sys_ini:r_u32(self.section, 'fire_distance')
	text = "эффективная дальность: "..string_format("%d", n).." метров"
	table_insert( v, {"fire_distance", text} )

	n = sys_ini:r_u32(self.section, 'rpm')
	text = "скорострельность: "..string_format("%d", n).." в/мин"
	table_insert( v, {"rpm", text} )

	n = sys_ini:r_u32(self.section, 'ammo_mag_size')
	text =	"ёмкость магазина: %c[light_red]"..
			tostring(self.item:get_ammo_in_magazine())..
			"%c[default] / %c[light_green]"..tostring(n)
	table_insert( v, {"ammo_mag_size", text} )

	if level.get_game_difficulty() < game_difficulty.veteran then
		n = sys_ini:r_float(self.section, 'hit_power')
		local ammo = string.explode(ammo_class, ",", true)
		local k = sys_ini:r_float(ammo[ammo_type+1], "k_hit")
		text = string_format("урон: %.2f", n*k)
		table_insert( v, {"hit_power", text} )
	end

	if sys_ini:r_bool_ex( self.section, "scope_nv", false ) then
		table_insert( v, {"nv_scope", "прицел ночного видения"} )
	end
	if sys_ini:r_clsid(self.section, "class") == clsid.wpn_binocular_s then
		table_insert( v, {"adjust_scope", "регулируемый прицел"} )
		if sys_ini:r_bool(self.section, "vision_present") == true then
			table_insert( v, {"comp_scope", "автозахват цели"} )
		end
	end
	if string_find(self.section, "_kalibr") then
		text = "смена калибра"
		local parent_sect = string.gsub(self.section, "_kalibr", "")
		if sys_ini:section_exist(parent_sect) then
			s = string.match(ammo_class, "[%d%.]+x[%d%.]+")
			local s2 = sys_ini:r_string(parent_sect, "ammo_class")
			s2 = string.match(s2, "[%d%.]+x[%d%.]+")
			if s and s2 then
				text = text.." с "..s2.." на "..s
			end
		end
		table_insert( v, {"kalibr", text} )
	end
	if string_find(self.section, "_otdaca") then
		table_insert( v, {"otdaca", "уменьшена отдача"} )
	end
	if string_find(self.section, "_ves") then
		table_insert( v, {"ves", "снижен вес"} )
	end

	self:ShowProps(v)
end
-- Показываем параметры артефактов
function CUIDescriptionWnd:ShowAfParams()
	local params = {}
	local val, txt = 0, ""

	for i,t in ipairs(conditions_params) do
		-- val = sys_ini:r_float(self.section, t.prop, 0)
		val = self.item:get_inventory_item_float( artefact_offsets.conditions[t.prop] )
		if val~=0 then
			val = val/actor_conditions[t.prop]
			txt = t.text.." "
			if t.prop == "bleeding_restore_speed" then
				txt = txt..(val>0 and "%c[green]" or "%c[red]+")
				val = -val
			elseif t.prop == "radiation_restore_speed" then
				txt = txt..(val>0 and "%c[red]+" or "%c[green]")
			else
				txt = txt..(val>0 and "%c[green]+" or "%c[red]")
			end
			txt = txt..string_format("%d",val)..(t.unit or "%")
			table_insert( params, {t.tex, txt} )
		end
	end

	local hit_absorbation_sect = sys_ini:r_string(self.section, "hit_absorbation_sect")
	for i,t in ipairs(hit_types) do
		-- val = sys_ini:r_float(hit_absorbation_sect, t.prop.."_immunity")
		val = self.item:get_inventory_item_float( artefact_offsets.immunities[t.prop.."_immunity"] )
		if val~=1 then
			val = 100-val*100
			txt = t.text.." "..(val<0 and "%c[red]" or "%c[green]+")..string_format("%d%%",val)
			table_insert( params, {t.prop, txt} )
		end
	end

	if sys_ini:line_exist(hit_absorbation_sect, "physic_strike_wound_immunity") then
		val = sys_ini:r_float(hit_absorbation_sect, "physic_strike_wound_immunity")
		if val~=1 then
			val = 100-val*100
			txt = "Удар: "..(val<0 and "%c[red]" or "%c[green]+")..string_format("%d%%",val)
			table_insert( params, {"physic_strike", txt} )
		end
	end

	if sys_ini:line_exist(self.section, "additional_inventory_weight") then
		val = sys_ini:r_float(self.section, "additional_inventory_weight")
		if val~=0 then
			txt = "Переносимый вес: "..(val>0 and "%c[green]+" or "%c[red]")..string_format("%.1f",val*self.condition).." кг"
			table_insert( params, {"additional_weight", txt} )
		end
	end

	if #params > 0 then
		self:ShowProps(params)
	end
end
-- Показываем параметры костмов
function CUIDescriptionWnd:ShowOutfitParams()
	local params = {}
	local val, val2, txt = 0, 0, ""
	for i,t in ipairs(hit_types) do
		val = sys_ini:r_float(self.section, t.prop.."_protection")
		if val~=0 then
			val = val*100
			val2 = val*self.condition
			txt = t.text.." "..(val<0 and "%c[red]" or "%c[green]+")..string_format("%d%%",val)..
				"%c[gray] ("..(val2>0 and "+" or "")..string_format("%d%%",val2)..")"
			table_insert( params, {t.prop, txt} )
		end
	end

	if sys_ini:line_exist(self.section, "physic_strike_protection") then
		val = sys_ini:r_float(self.section, "physic_strike_protection")
		if val~=0 then
			val = val*100
			val2 = val*self.condition
			txt = "Удар: "..(val<0 and "%c[red]" or "%c[green]+")..string_format("%d%%",val)..
				"%c[gray] ("..(val2>0 and "+" or "")..string_format("%d%%",val2)..")"
			table_insert( params, {"physic_strike", txt} )
		end
	end

	local f = false
	val = self.item:get_power_loss()
	if val ~= 1 then
		val = val*100 - 100
		f = true
	end
	val2 = 0
	if sys_ini:line_exist(self.section, "power_loss") then
		val2 = sys_ini:r_float(self.section, "power_loss")
		if val2 ~= 1 then
			val2 = val2*100 - 100
			f = true
		end
	end
	if f then
		txt = "Усталость: "..( (val2>0 and "%c[red]+") or (val2<0 and "%c[green]") or "%c[white]" )..string_format("%d%%",val2)..
			"%c[gray] ("..(val>0 and "+" or "" )..string_format("%d%%",val)..")"
		table_insert( params, {"power_loss", txt} )
	end

	if sys_ini:line_exist(self.section, "additional_inventory_weight") then
		val = self.item:get_additional_inventory_weight()
		val2 = sys_ini:r_float(self.section, "additional_inventory_weight")
		if val > 0 or val2 > 0 then
			txt = "Грузоподъёмность: "..(val2>0 and "%c[green]+" or "%c[white]")..string_format("%.1f",val2).." кг"..
				"%c[gray] ("..(val>0 and "+" or "")..string_format("%.1f",val).." кг)"
			table_insert( params, {"additional_weight", txt} )
		end
	end

	val = sys_ini:r_u32(self.section, "belt_slots")
	txt = "Пояс: %c[green]"..tostring(val)..naxac.declension(val, " ячейка", " ячейки", " ячеек")
	table_insert( params, {"container", txt} )

	self:ShowProps(params)
end
-- Показываем параметры энергозависимых предметов
function CUIDescriptionWnd:ShowEnergyConsumingItemParams(charge)
	charge = math.clamp(charge, 0, 1)

	local caption = sys_ini:r_string_ex(self.section, "energy_level_text", "ui_st_charge")

	local st = self.xml:InitStatic("props", self.scroll_v)
	st:SetHeight(24)

	st.icon = self.xml:InitStatic("props:prop_texture", st)
	st.icon:InitTexture("ui_inv_icon_charge")

	st.scale_b = CUIStatic()
	st:AttachChild(st.scale_b)
	st.scale_b:Init( "ui_inventory_progress_bar", 22, 11, 150, 8 )
	st.scale_b:SetStretchTexture(true)
	st.scale_b:SetColor( GetARGB(255, 255, 210, 210) )

	st.scale = CUIStatic()
	st:AttachChild(st.scale)
	local tex_name, tex_rect = get_texture_info( "ui_inventory_progress_bar" )
	st.scale:Init( tex_name, 22, 11, 150*charge, 8 )
	st.scale:SetStretchTexture(true)
	st.scale:SetOriginalRect( tex_rect.x1, tex_rect.y1, tex_rect.x2*charge, tex_rect.y2 )
	st.scale:SetColor( GetARGB(255, 255, 40, 20) )
	st.scale:SetText( get_string(caption)..": "..string_format("%d%%", charge*100) )
	st.scale:SetTextY(-13)

	self.addH = self.addH + 25
	
	local tm = sys_ini:r_float_ex(self.section, "working_time")
	local p = sys_ini:r_float_ex(self.section, "power_consumption")
	if p then
		self:ShowProps( { {"power_loss", string_format("энергопотребление: %.02fА", p)} } )
	elseif tm then
		tm = charge * tm
		local h = math.floor(tm/60)
		local txt
		if h >= 1 then
			txt = string_format("%dч. %dмин.", h, tm%60)
		else
			txt = string_format("%dмин.", tm)
		end
		self:ShowProps( { {"time", "время работы: "..txt} } )
	end

	local accums = sys_ini:r_list(self.section, "energy_source")
	if accums then
		local cur_accumm = ""
		local b = self.item:binded_object()
		if b and b.get_current_accumm then
			cur_accumm = b:get_current_accumm()
		end
		local clr
		for i, v in ipairs(accums) do
			if cur_accumm == v then
				clr = {255, 160, 255, 160}
			else
				clr = nil
			end
			self:ShowPropFromIni( GetIconParams(v), get_inv_name(v), clr )
		end
	end
end

function CUIDescriptionWnd:Remove()
	if self.autounsubscribe then
		self:unsubscribe()
	end
	self.owner:DetachChild(self.frame)
	self.owner = nil
end

function CUIDescriptionWnd:OnItemFocus( item )
	self.itemInFocus = item:id()
	self.shift_tmr = time_global() + shift_show_descr
end

function CUIDescriptionWnd:OnItemFocusLost( item )
	if self.itemInFocus==item:id() then
		self.itemInFocus = nil
	end
	self:HideDescription()
end

function CUIDescriptionWnd:OnUpdate( delta )
	if self.shift_tmr and self.shift_tmr < time_global() then
		if self.itemInFocus and ( self.itemInFocus > 65535 or AI:object( self.itemInFocus ) ) then
			if self.itemInFocus > 65535 then
				self:ShowDescription( fake_inventory_item.get_item(self.itemInFocus) )
			else
				self:ShowDescription( level_object(self.itemInFocus) )
			end
		end
		self.shift_tmr = nil
	end
end

function CUIDescriptionWnd:OnKeyPress(dik, bind)
	if ( dik==DIK_keys.DIK_LMOUSE or dik==DIK_keys.DIK_RMOUSE ) then
		self:HideDescription()
		self.itemInFocus = nil
	end
end

--------------------------------------------------------------------------------------------------
local check_tbl = {}
check_tbl["bezoar"] = function()
	if Actor:dont_has_info("info_artmod_gusenica_have") then
		Actor:give_info_portion( "info_artmod_gusenica_have" )
	end
end
check_tbl["arhara_instruk"] = function()
	if Actor:dont_has_info("info_artmod_art_acumm") then
		Actor:give_info_portion( "info_artmod_art_acumm" )
	end
end
check_tbl["wpn_bizon1"] = function ()
	if Actor:dont_has_info("anom_bizon_info") then
		Actor:give_info_portion( "anom_bizon_info" )
	end
end
check_tbl["subway_scaner_doc"] = function ()
	if Actor:has_info( "spatial_subway_doc" ) then return end
	Actor:give_info_portion( "spatial_subway_doc" )
	naxac.treasure_ss_1()
	naxac.ss_teleports()
end
check_tbl["subway_scaner_doc2"] = function ()
	if Actor:has_info( "spatial_subway_doc2" ) then return end
	Actor:give_info_portion( "spatial_subway_doc2" )
	naxac.treasure_ss_2()
end
check_tbl["subway_scaner_doc3"] = function ()
	if Actor:has_info( "spatial_subway_start" ) then return end
	Actor:give_info_portion( "spatial_subway_start" )
end
check_tbl['snp_note1'] = function ()
	if Actor:dont_has_info("snp_find_name1_have") then 
		local se_obj = AI:create("kotobegemot_bar",vector():set(115.00399780273,-5.3044028282166,14.159286499023),33614,1239)
		set_story_id(se_obj, story_ids.kotobegemot_bar)
		Actor:give_info_portion("snp_find_name1_have")
	end
end
check_tbl['arhara_listok'] = function()
	if Actor:dont_has_info("perehod_chaes2_na_chaes") then 
		Actor:give_info_portion("perehod_chaes2_na_chaes")
	end
end
check_tbl['kapitan_pda'] = function()
	if level.name()~="lost_village" then return end
	if Actor:dont_has_info("pda_bazar") then
		Actor:give_info_portion("pda_bazar")
		arhara_dialog.village_kap_pda()
	end
end
check_tbl['zapiska_ranennogo'] = function()
--	if level.name()~="l08_yantar" then return end
	if Actor:dont_has_info("have_listok") then
		Actor:give_info_portion("have_listok")
	end
end
check_tbl['fli_pda1'] = function ( obj )
	if Actor:dont_has_info("fli_nolik_done") then 
		news_manager.send_tip("gg_k_useru_sms", 10, "str", 30000)
		Actor:give_info_portion("fli_nolik_done")
	end
end
check_tbl['ara_pda'] = function ()
	if Actor:has_info("info_way104a") then return end
	sak.add_new_rostok_105()
	sak.add_new_mil_104()
end
check_tbl['sak_document'] = function()
	if Actor:has_info("info_way106a") then return end
	if level.name()~="l10_radar" then return end
	sak.add_new_radar_106()
end
check_tbl['sak_document2'] = function()
	if Actor:has_info("info_artmod_electra_flash_zharka") then return end
	Actor:give_info_portion("info_artmod_electra_flash_zharka")
end
check_tbl['garbage_pda'] = function()
	if Actor:has_info("info_artmod_drops_mincer") then return end
	Actor:give_info_portion("info_artmod_drops_mincer")
end
check_tbl['rad_pda'] = function()
	if Actor:has_info("info_artmod_ameba_mica_galant") then return end
	Actor:give_info_portion("info_artmod_ameba_mica_galant")
end
check_tbl['volkodav_pda'] = function()
	if Actor:has_info("info_artmod_fireball_buzz") then return end
	Actor:give_info_portion("info_artmod_fireball_buzz")
end
check_tbl['sak_book4'] = function()
	if Actor:has_info("doktor_alife") then return end
	Actor:give_info_portion("doktor_alife")
end
check_tbl['crazy_flash'] = function()
	if Actor:has_info("info_amk_recipt_stone_dikoobraz") then return end
	Actor:give_info_portion("info_amk_recipt_stone_dikoobraz")
end


function on_read_descr(section)
	if check_tbl[section] then
		check_tbl[section]()
	end
end
